* [2020-1-13 Mon] - start of involvement in spreading depression project 
** Questions about spreading depression code:
*** WeiModelVolume.py:
**** what's original paper?
**** error:
CVode-- At t = 0 and h = 2.35882e-09, the corrector
convergence failed repeatedly or with |h| = hmin.

CVode 0x563afc10c5d0 __nrnsec_0x563afcb61980 advance_tn failed, err=-7.
err=-7
NEURON: variable step integrator error
 near line 0
 ^
        fadvance()
      advance()
    step()
  continuerun(1000)
Traceback (most recent call last):
  File "WeiModelVolume.py", line 486, in <module>
    h.continuerun(1e3)
RuntimeError: hoc error
*** SpatialModel.py:
**** Don't follow what this does (line 170):
def concentration(i, o):
    return lambda nd: i if isinstance(nd, rxd.node.Node1D) else o
**** this too (line 219):
ecsbc = rxd.Parameter([ecs], value = lambda nd: bc(nd))
**** looks like you immediately redefine *nkcc1* and *kcc2* (lines 232-235), wondering if there's any reason why?
nkcc1 = unkcc1*fko*(log((ki * cli / vir**2) / (ko * clo / vor**2)) + log((nai * cli / vir**2) / (nao * clo / vor**2)))
kcc2 = ukcc2 * log((ki * cli / vir**2) / (ko * clo / vor**2))
nkcc1 = unkcc1*fko*(log((ki * cli * vor**2) / (ko * clo * vir**2)) + log((nai * cli * vor**2) / (nao * clo * vir**2)))
kcc2 = ukcc2 * log((ki * cli * vor**2) / (ko * clo * vir**2))
* [2020-1-14 Tue]
** Notes on Wei et al Spikes, Seizures, Spreading Depression
*** Unification of Neuronal Spikes, Seizures, and Spreading Depression
X Yina Wei,1 Ghanim Ullah,3,4 and X Steven J. Schiff1,2,4
1 Center for Neural Engineering, Department of Engineering Science and Mechanics, and
2 Departments of Neurosurgery and Physics, The Pennsylvania
State University, University Park, Pennsylvania 16802,
3 Department of Physics, University of South Florida, Tampa, Florida 33620, and
4 Mathematical Biosciences Institute, The Ohio State University, Columbus, Ohio 43210
*** Modify HH equations to include oxygen O2 dependence of ion flux, 3Na/2K pumps on neurons and glia, and KCC2 and NKCC1 cotransporters on glia
*** spiking activity, seizure activity, and spreading depression unified: lie on continuum, state determined by [O2]bath and [K]bath
**** reflected in single neuron activity, not networks
**** also includes wave of death
*** "for in vivo, brain representation would require extension to include an autoregulating vascular system and an explicit blood– brain barrier
interposed between extracellular space and capillary blood"
*** "Both seizures and SD are induced by similar mechanisms: hypoxia, hypoglycemia, neural injury, high concentrations of K , or Na /K  pump inhibition (Dreier, 2011).
In in vitro experiments, increasing potassium in the bath perfusate to 8.5 mM (normal 3.5 mM) induces spontaneous periodic seizures (Traynelis and Dingledine, 1988).
Elevating potassium further to 26 mM (Anderson and Andrew, 2002) or 40 mM (Zhou et al., 2010) evokes SD."
*** "Migraines occasionally trigger seizures, seizures often initiate postictal headache similar to migraines, and certain antiepileptic drugs demonstrate efficacy
in migraine prophylaxis. Recent data reveals that monogenic mutations (CACNA1A, ATP1A2, and SCN1A) can cause epilepsy, migraines, or both (Rogawski, 2010)."

* [2020-3-16 Mon] - convo with adam
** more realistic neurons, more V/SA ratio
** focus speed spreading CA wave and concentrations Na and K
** migraine vs. ischemic spreading depolarization
** more thorough parameter search

* [2020-3-17 Tue] - glymphatics paper
** Main Points / Why read the paper
*** only review with critical focus i'm aware of
*** We give some new arguments regarding glymphatics in light of previous diffusion work
**** "by  this  logic,  if  convective  flow  by  far  dominates  over  diffusion,  therewould  be  little  to  no  signal  unless  the  probe
and  source  were  aligned  along  thetrajectory of ion flow. Furethermore, this modeling approach focused exclusively onvariability ofin vivoRTI
data. However, a similar degree of variability is seen inin vitroRTI measurements where glymphatic flow is certainly absent. For example,values of
ECS volume fraction (α) range from 0.17 to 0.28 in striatumin vitroandfrom 0.18 to 0.33 in CA1 hippocampusin vitrowhile tortuosity (λ) rage from
1.35– 1.75 in striatumin vitroand 1.35 – 1.56 in hippocampal CA1in vitro[14, 15].RTI data sets fromin vitroexperiments thus should be treated as controls"
*** point out some new issues with AQP4 and possible alternative interpretations:
**** "It may be that APQ4 helps maintain proper osmotic pressures betweenparavascular spaces, the interstitium, and the cytosol of astrocytic endfeet which
determines the gap size between between the endfeet that form the glia limitans."
**** "Interestingly, following tracerinfusion in APQ4-KO mice, there is very little tracer accumulation in VR spaces,especially compared to similar experiments
in their wild-type counterparts in whichhigh molecular weight dextrans accumulated in VR spaces [7]. Even in the absenceof CSF flow, one would expect some
tracer transport into VR spaces via diffusion.This suggests that APQ4 may have a role in maintaining the volume of VR spaces."

* [2020-3-23 Mon] / [2020-3-24 Tue] - plotting wave speed / progress
** playing around with plotting speed of depolarization wave
** wave_progress.txt - distances don't seem to change, just time
** why does plotting Vm vs distance stop at certain point

* [2020-3-25 Wed] still at it
** trying second method, smoothing Vm vs distance for each time step, find peak, repeat

* [2020-3-26 Thu]
** pretty reasonable looking figs for wavefront position and velocity over time
** trying out more realistic number of neurons with different volume to SA ratio
*** things right now
Lx, Ly, Lz = 500, 500, 250       # size of the extracellular space mu m^3
Ncell = int(2e5*(Lx*Ly*Lz*1e-9)) # number of neurons (200'000 per mm^3) -- unrealistic
Surface Area: 2827.4
Volume: 14137.2
SA/V: 0.199
*** alternative:
Reduce soma radius to 10, add dendrite, 20 length, unit radius
SA: 1388.6
V: 4251.6
SA/V: 0.326

* [2020-3-30 Mon] - version control, more realistic cell pop
** started a git brach *wave_speed*
*** added notebook, little move_stuff.sh util, tidied up folder on neurosim maching [[/u/craig/spreadingdepression/][spreading depression project]]
** forgot to actually switch cell models when running more realistic cell pop last week, so SA/V ratio was the same
*** file: *SpatialModelRealistic.py* - 'v0.0 - realisitc cell dendity for cortex, increased SA to V ratio, cmdline specify anoxic vs normoxic'
*** running *anoxic* on *my* and *normoxic* on *zn*
*** for soma radius: 10, dend radius: 2, For L = 40, SA ~ 0.4; For L = 90, SA = 0.5
*** file: *SpatialModelRealistic.py* - 'reduced Nrec, original greater than Ncell'
*** file: *SpatialModelRealistic.py* - 'v0.1 - fixed dend diameter, dend length now cmdline specified'
** Takano2007-tu Cortical spreading depression causes and coincides with tissue hypoxia
*** CSD leads to neuronal swelling lasting minutes
*** loss of spines

* [2020-3-31 Tue] - more of the same
** ran *SpatialModelRealistic.py* overnight with a couple SA/V ratios under normoxic and anoxic conds, running a couple more now, sizeable difference
*** [[./anox_normox_wavePos_SAtoV.png][see file name, incomplete and ugly anyway]]
*** [[./anox_normox_waveV_SAtoV.png][""""]]
*** trouble with longer dends: 'incrasing size of Lz from 250 to 350 due to issues with longer dends'
**** increased to 500, running on *zn*
**** thinking the issue was actually dealing neurons to positions outside box, testing on *my*

* [2020-4-1 Wed]
** constraining Z position based on dend length worked
*** technically, cell densities are (at least on avg) slightly different, no sure if that's such a problem
*** could constrain all to maximum dend length if it is
** cool figures:
*** [[./anoxVsNormox_SA2V.png][SD wave position, anoxic vs. normoxic, 4 SA to V ratios]]
*** [[./anoxVsNormox_SA2V_velocity.png][SD wave velocity, anoxic vs. normoxic, 4 SA to V ratios]]
** trying with more room, more recorded cells
*** file: *SpatialModelRealistic.py* - 'v0.2 - expanded dimensions and number recorded cells, fixed vel smoothing'
*** running for 600 ms on *pt*
** running everything before run() on *my* to look into K+ wave

* [2020-4-2 Thu]
** looking into K+ wave
*** basically no changes in wave_progress.txt
*** file: *SpatialModelRealistic.py* - 'added plotting for K concenctration'
**** running that on *ag*
** SD wave in larger volume: Lx, Ly, Lz = 750, 750, 375
*** [[./Figures/normoxic_35_expand_frontPos.png][Normoxic, SA/V: 0.35, larger volume, SD wave front position]]
*** [[./Figures/normoxic_35_expand_waveV.png][Normoxic, SA/V: 0.35, larger volume, SD wave velocity]]
*** [[./Figures/volumeSize_SDwavePos.png][comparison of two volume sizes, normoxic conds, SA/V: 0;35, not a huge difference]]

* [2020-4-3 Fri] - more on K+ wave, alternatives for SD wave front calculation
** K+ wave
*** file: *SpatialModelRealistic.py* - 'trimmed back spatial demensions for plotting K+ wave'
**** running on *my* - output to ./Data/normox_35_Kconc_trimECS
**** killed version on *ag* - taking too long

* [2020-4-6 Mon] - more K+ wave, larger ECS
** file: *SpatialModelRealistic.py* - 'larger ECS, only plot extracellular K+ concentration'

* [2020-4-7 Tue]
** making gif from pngs
import imageio
from os import listdir
filenames = listdir(path='gifFigs')
times = []
for file in filenames:
  times.append(float(file.split('_')[-1].split('.')[0]))
import numpy as np
inds = np.argsort(times)
filenames_sort = [filenames[i] for i in inds if (i%5) == 0]
imagesc = []
for filename in filenames_sort:
     imagesc.append(imageio.imread('gifFigs/'+filename))
imageio.mimsave('Figures/k_conc.gif', imagesc)
** [[./Figures/k_conc.gif][not very pretty of K+ over time (400ms)]]
** file *SpatialModelRealistic.py* - 'v0.3 - back to original dimensions, plotting K concentration and membrane potential together to generate a gif, doubled number of threads'

* [2020-4-9 Thu]
** finished running for 1s, plotted [K+] and membrane V, made neat video
*** [[Figures/Kconc_memV_2s_origECS.gif][normoxicz, SA to Volume ratio: 35]]
** suggestions for improving model:
*** make section a cube (sphere's too hard)
*** extracellular elevated [K+] = 70 mM
*** increase r0
*** *SpatialModelRea`listic.py* - 'v0.4 - r0 = 75, Lz = 500, initial elevate K+ 70mM'
** in vivo vs. in vitro
*** in vitro - no diffusion out, in vivo - diffusion out the bottom (corpus callosum)
*** sabina - include vasculature for in vivo, bill - too much for this iteration
**** wonder if there are morphology files for vasculature in .asc format? or the other one

* [2020-4-13 Mon] - results from sabina's suggestions
** [[Figures/cube_sabinaSuggestions.gif][cube, larger initial radius, 1s]]
*** bad ylim for [K+] plot
*** probably not long enough, will try running longer
** file: *SpatialModelRealistic.py* - 'v0.5 - fixed [K+] plotting, changed method for calculating SD wave position'

* [2020-4-17 Fri] - reduxed results a la sabina's suggestions
** sim results look good: [[./Figures/normox_cube_1500ms.gif][firing spreads from 70um (edged of elevate K+) to 150um]]
** spread of firing is assymetric and in two directions
*** away from edge of elevated [K+]: ~(150-70) * 10e-3 / (1.5/60) = 32.0 mm/min
*** in towards center of elevated [K+] as it decreases: ~(70-50) * 10e-3 / (1.5/60) = 8.0 mm/min
** new way of calculating SD wave front position totally wrong . . .
*** switching to this:
vs = [sec.v for sec in h.allsec()]
inds = numpy.argmax(numpy.array(vs) > -15)
posish = [cell_positions[ind] for ind in inds]
front_pos = numpy.max(posish)
back_pos = numpy.min(posish)*
** file: *SpatialModelRealistic.py* - 'v0.6 - changing wave position method again, including firing back into elevated K+ radius,
allow user to change between invivo and invitro boundary conds'

* [2020-4-18 Sat]
** SD wave position calc didn't work.  Now this:
# compute SD wave position
vs = [sec.v for sec in h.allsec()]
posish = cell_pos_np[numpy.array(vs) > -15]
if len(posish) > 0:
    front_pos = numpy.max(posish)
    back_pos = numpy.min(posish)
else:
    front_pos = 0
    back_pos = 0
time_stamps.append(h.t)
*** cell_pos_np = np.array(cell_positions)
** running anoxic version on *my*

* [2020-4-20 Mon]
** sim on *my* 2/3 of the way through

* [2020-4-21 Tue]
** file:  *SpatialModelRealistic.py*: 'v0.7 - trying parallel context, still working on wave front postition'
*** works w/ MPI now!

* [2020-4-23 Thu]
** file: *SpatialModelRealistic.py*: 'v0.8 - fixed so cell position and voltages are only somatic, no more dendritic Vs'
*** testing out with 2 cores on ag for 200ms

* [2020-4-24 Fri]
** running test on *my*, saving membrane potenitals
*** from 200ms run, some look like Adam's data, some spike persistently, some don't spike at all . . .
*** running for 1s to see how that goes

* [2020-4-25 Sat]
** plotting membrane potenitals
import pickle
file = open('Data/cube_normox_1s/recs.pkl', 'rb')
data = pickle.load(file)
file.close()
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
for i, vec in enumerate(data['v']):
  fig = plt.figure(dpi=200)
  plt.plot(data['t'], vec)
  plt.xlabel('Time (ms)')
  plt.ylabel('Membrane Potential (mV)')
  plt.title('Radius: ' + str(data['rad'][i]))
  plt.savefig('Data/cube_normox_1s/v_traces/cell_' + str(i) + '.png')
  plt.close()
  del(fig)

* [2020-4-27 Mon] - more sims, converting to netpyne
** in *recs*, soma_ko was saved w/ soma_ki, fixed and running
** plotting membrane potentials and extracellular K concentration
import pickle
file = open('Data/cube_normox_500ms/recs.pkl', 'rb')
data = pickle.load(file)
file.close()
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
for i, vec in enumerate(data['v']):
  fig = plt.figure(dpi=200)
  plt.subplot(211)
  plt.plot(data['t'], vec)
  plt.ylabel('Membrane Potential (mV)')
  plt.title('Radius: ' + str(data['rad'][i]))
  plt.subplot(212)
  plt.plot(data['t'], data['ko'][i])
  plt.xlabel('Time (ms)')
  plt.ylabel('Extracellular [K+]')
  plt.savefig('Data/cube_normox_500ms/v_traces/cell_' + str(i) + '.png')
  plt.close()
  del(fig)
** working on conversion to netpyne
*** not sure how neuron.rxd.v should be used
*** where do rxd.Parameter's go?

* [2020-4-28 Tue]
** plotting all concentrations:
for i, vec in enumerate(data['v']):
  fig = plt.figure(figsize=(50,16))
  plt.subplot(141)
  plt.plot(data['t'], vec)
  plt.ylabel('Membrane Potential (mV)')
  plt.xlabel('Time (ms)')
  plt.title('Radius: ' + str(data['rad'][i]))
  plt.subplot(242)
  plt.plot(data['t'], data['ki'][i])
  plt.ylabel('Intracellular K+')
  plt.subplot(246)
  plt.plot(data['t'], data['ko'][0])
  plt.ylabel('Extracellular K+')
  plt.xlabel('Time (ms)')
  plt.subplot(243)
  plt.plot(data['t'], data['nai'][i])
  plt.ylabel('Intracellular Na+')
  plt.subplot(247)
  plt.plot(data['t'], data['nao'][0])
  plt.ylabel('Extracellular Na+')
  plt.xlabel('Time (ms)')
  plt.subplot(244)
  plt.plot(data['t'], data['cli'][i])
  plt.ylabel('Intracellular K+')
  plt.subplot(248)
  plt.plot(data['t'], data['clo'][0])
  plt.ylabel('Extracellular Cl-')
  plt.xlabel('Time (ms)')
  plt.savefig('Data/cube_normox_500ms/all_traces/cell_' + str(i) + '.png')
  plt.close()
  del(fig)
** git commit: 'simple version of netpyne, all the rxd stuff just copied over directly'

* [2020-4-29 Wed] - still working on porting to netpyne
** 'adding in template because cells originally didnt have 3d pts'
** took a little doing but seems to be running on *my*

* [2020-4-30 Thu]
** failed on finitialize, works without the rxd stuff

* [2020-5-21 Thu] - getting back to converting to netpyne
** looks like need to add *_addParameter* to *netpyne/network/netrxd.py*

* [2020-5-28 Thu] - some progress with converting to netpyne
** finally got a multicompartment reaction working
** needed to add rxd math functions to *netrxd.py*
** issues to work out
*** still need to add *_addParameter* to *netpyne/network/netrxd.py*
*** definition of *volume_scale* in *netParams.py* is a bit hacky, especially since SA/V hard coded

* [2020-5-30 Sat] - more conversion to netpyne
** got the whole spatial model implemented by replacing parameters with species
** current error when initializing:
*** error
Traceback (most recent call last):
  File "/usr/arch/nrn/neuron/rxd/rxd.py", line 1560, in _init
    _compile_reactions()
  File "/usr/arch/nrn/neuron/rxd/rxd.py", line 1237, in _compile_reactions
    creg._initalize()
  File "/usr/arch/nrn/neuron/rxd/region.py", line 200, in _initalize
    self._ecs_initalize()
  File "/usr/arch/nrn/neuron/rxd/region.py", line 152, in _ecs_initalize
    self.ecs_location_index[sid][seg_idx] = s().index_from_xyz(x,y,z)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'

If you suspect this is an IPython 7.12.0 bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org

You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.

Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True

NEURON: Python Callback failed
 near line 0
 objref hoc_obj_[2]
                   ^
        finitialize()
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
~/spreadingdepression/Netpyne_Version/init.py in <module>
     15 sim.net.addStims()                    # add external stimulation to cells (IClamps etc)
     16 sim.net.addRxD()                      # add reaction-diffusion (RxD)
---> 17 sim.setupRecording()             # setup variables to record for each cell (spikes, V traces, etc)
     18 sim.simulate()
     19 sim.analyze()

~/my_netpyne/netpyne/sim/setup.py in setupRecording()
    282         # if have rxd objects need to run h.finitialize() before setting up recording so pointers available
    283         if len(sim.net.params.rxdParams) > 0:
--> 284             h.finitialize()
    285
    286         # get list of cells from argument of plotTraces function

RuntimeError: hoc error

In [1]:

*** trying one reaction at a time, see if it compiles

* [2020-6-15 Mon] - finally squared away ECS issue with Netpyne
** cells needed *pt3d*
** everything compiles and runs, but nothing looks right

* [2020-6-25 Thu] - potential sims for CNS poster
** rerunning SpatialModelRealistic.py on zn - ischemic cond, 3s, increased
r0 to 100 um, increased K+ to 70 as per sabina's suggestion

* [2020-6-26 Fri] & [2020-6-27 Sat] - running conds above with different
V to SA ratios and normox

* [2020-6-29 Mon]
** some of those sims still running
** anox with dendL=90um finished
*** seems to go farther and faster than dendL=20
** plotting wave progress
f = open('wave_progress.txt', 'r')
times = []
wave_pos = []
for line in f.readlines():
  times.append(float(line.split()[0]))
  wave_pos.append(float(line.split()[-1]))
f.close()
*** plot comparison of wave progress for two conds
from matplotlib import pyplot as plt
plt.figure(figsize=(8,8))
f = open('/u/craig/spreadingdepression/Data/anox_3s_r0_100um/wave_progress.txt', 'r')
times = []
wave_pos = []
for line in f.readlines():
  times.append(float(line.split()[0]))
  wave_pos.append(float(line.split()[-1]))
f.close()
plt.plot(times, wave_pos, label='V:SA = 0.33')
f = open('/u/craig/spreadingdepression/Data/anox_3s_r0_100um_dendL_90/wave_progress.txt', 'r')
times = []
wave_pos = []
for line in f.readlines():
  times.append(float(line.split()[0]))
  wave_pos.append(float(line.split()[-1]))
f.close()
plt.plot(times, wave_pos, label='V:SA = 0.5')
plt.xlabel( 'Time (ms)', fontsize=14)
plt.ylabel('Position (um)', fontsize=14)
plt.legend(fontsize=14)
plt.title('Elevated [K+] Wave Front Progress', fontsize=15)
plt.show()

* [2020-6-30 Tue] - realistic cell SA/V / morphs
** adapted code from https://github.com/ahwillia/PyNeuron-Toolbox/blob/master/PyNeuronToolbox/morphology.py
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
import string
from neuron import h
import numbers

# a helper library, included with NEURON
h.load_file('stdlib.hoc')
h.load_file('import3d.hoc')

class Cell:
    def __init__(self,name='neuron',soma=None,apic=None,dend=None,axon=None):
        self.soma = soma if soma is not None else []
        self.apic = apic if apic is not None else []
        self.dend = dend if dend is not None else []
        self.axon = axon if axon is not None else []
        self.all = self.soma + self.apic + self.dend + self.axon

    def delete(self):
        self.soma = None
        self.apic = None
        self.dend = None
        self.axon = None
        self.all = None

    # def __str__(self):
    #     return self.name


def load(filename, fileformat=None, cell=None, use_axon=True, xshift=0, yshift=0, zshift=0):
    """
    Load an SWC from filename and instantiate inside cell. Code kindly provided
    by @ramcdougal.
    Args:
        filename = .swc file containing morphology
        cell = Cell() object. (Default: None, creates new object)
        filename = the filename of the SWC file
        use_axon = include the axon? Default: True (yes)
        xshift, yshift, zshift = use to position the cell
    Returns:
        Cell() object with populated soma, axon, dend, & apic fields
    Minimal example:
        # pull the morphology for the demo from NeuroMorpho.Org
        from PyNeuronToolbox import neuromorphoorg, load
        with open('c91662.swc', 'w') as f:
            f.write(neuromorphoorg.morphology('c91662'))
        cell = load(filename)
    """

    if cell is None:
        s = '-'
        cell = Cell(name=s.join(filename.split('.')[:-1]))

    if fileformat is None:
        fileformat = filename.split('.')[-1]

    name_form = {1: 'soma[%d]', 2: 'axon[%d]', 3: 'dend[%d]', 4: 'apic[%d]'}

    # load the data. Use Import3d_SWC_read for swc, Import3d_Neurolucida3 for
    # Neurolucida V3, Import3d_MorphML for MorphML (level 1 of NeuroML), or
    # Import3d_Eutectic_read for Eutectic.
    if fileformat == 'swc':
        morph = h.Import3d_SWC_read()
    elif fileformat == 'asc':
        morph = h.Import3d_Neurolucida3()
    else:
        raise Exception('file format `%s` not recognized'%(fileformat))
    morph.input(filename)

    # easiest to instantiate by passing the loaded morphology to the Import3d_GUI
    # tool; with a second argument of 0, it won't display the GUI, but it will allow
    # use of the GUI's features
    i3d = h.Import3d_GUI(morph, 0)

    # get a list of the swc section objects
    swc_secs = i3d.swc.sections
    swc_secs = [swc_secs.object(i) for i in range(int(swc_secs.count()))]

    # initialize the lists of sections
    sec_list = {1: cell.soma, 2: cell.axon, 3: cell.dend, 4: cell.apic}

    # name and create the sections
    real_secs = {}
    for swc_sec in swc_secs:
        cell_part = int(swc_sec.type)

        # skip everything else if it's an axon and we're not supposed to
        # use it... or if is_subsidiary
        if (not(use_axon) and cell_part == 2) or swc_sec.is_subsidiary:
            continue

        # figure out the name of the new section
        if cell_part not in name_form:
            raise Exception('unsupported point type')
        name = name_form[cell_part] % len(sec_list[cell_part])

        # create the section
        sec = h.Section(name=name, cell=cell)

        # connect to parent, if any
        if swc_sec.parentsec is not None:
            sec.connect(real_secs[swc_sec.parentsec.hname()](swc_sec.parentx))

        # define shape
        if swc_sec.first == 1:
            h.pt3dstyle(1, swc_sec.raw.getval(0, 0), swc_sec.raw.getval(1, 0),
                        swc_sec.raw.getval(2, 0), sec=sec)

        j = swc_sec.first
        xx, yy, zz = [swc_sec.raw.getrow(i).c(j) for i in range(3)]
        dd = swc_sec.d.c(j)
        if swc_sec.iscontour_:
            # never happens in SWC files, but can happen in other formats supported
            # by NEURON's Import3D GUI
            raise Exception('Unsupported section style: contour')

        if dd.size() == 1:
            # single point soma; treat as sphere
            x, y, z, d = [dim.x[0] for dim in [xx, yy, zz, dd]]
            for xprime in [x - d / 2., x, x + d / 2.]:
                h.pt3dadd(xprime + xshift, y + yshift, z + zshift, d, sec=sec)
        else:
            for x, y, z, d in zip(xx, yy, zz, dd):
                h.pt3dadd(x + xshift, y + yshift, z + zshift, d, sec=sec)

        # store the section in the appropriate list in the cell and lookup table
        sec_list[cell_part].append(sec)
        real_secs[swc_sec.hname()] = sec

    cell.all = cell.soma + cell.apic + cell.dend + cell.axon
    return cell

* [2020-7-1 Wed] - more of the same
** code for getting bounds of cell too keep inside ecs
def getLims(cell):
  x, y, z = [], [], []
  for sec in h.allsec():
    for i in range(sec.n3d()):
      x.append(sec.x3d(i))
      y.append(sec.y3d(i))
      z.append(sec.z3d(i))
  out = {'x' : (np.min(x), np.max(x)), 'y' : (np.min(y), np.max(y)),
  'z' : (np.min(z), np.max(z))}
  return out

cell = load('../L5PYR_Resonance/suter_shepherd/BS0284.CNG.swc')

bounds = getLims(cell)

for key in bounds.keys():
  print(key + ' ' + str(-bounds[key][0]+bounds[key][1]))

x 286.72999572753906
y 902.2800140380859
z 245.6399917602539
** for realistic cell geometries would have to make dimensions larger but further restrict soma size

* [2020-7-9 Thu]
** back to netpyne
*** NOTE in netrxd.py in _addStates(), looks like typo: line 261
** plotting a few example traces + o2 to ko ratio
import pickle
file = open('recs.pkl', 'rb')
data = pickle.load(file)
file.close()
from matplotlib import pyplot as plt
import numpy as np
plt.ion()
fig = plt.figure(figsize=(16,8))
i = 5
l = str(np.round((data['pos'][i][0] ** 2 + data['pos'][i][1] ** 2 + data['pos'][i][2] ** 2)**(0.5),1))
plt.subplot(3,3,1)
plt.plot(np.divide(data['t'],1000), data['v'][i], label=l)
plt.ylim(-80,55)
# plt.title('Radius: ' + , fontsize=15)
plt.ylabel('Membrane Potential (mV)', fontsize=14)
plt.subplot(3,3,4)
plt.plot(np.divide(data['t'],1000), data['o2'][i])
# plt.ylim(0,0.0052)
plt.ylabel('[O2] Bath', fontsize=14)
plt.subplot(3,3,7)
plt.plot(np.divide(data['t'],1000), data['ko'][i])
plt.ylabel('[K] Extracellular', fontsize=14)
i = 15
l = str(np.round((data['pos'][i][0] ** 2 + data['pos'][i][1] ** 2 + data['pos'][i][2] ** 2)**(0.5),1))
plt.subplot(3,3,2)
plt.plot(np.divide(data['t'],1000), data['v'][i], label=l)
plt.ylim(-80,55)
# plt.title('Radius: ' + str(np.round((data['pos'][i][0] ** 2 + data['pos'][i][1] ** 2 + data['pos'][i][2] ** 2)**(0.5),1)), fontsize=15)
plt.subplot(3,3,5)
plt.plot(np.divide(data['t'],1000), data['o2'][i])
plt.ylim(0,0.0052)
plt.subplot(3,3,8)
plt.plot(np.divide(data['t'],1000),data['ko'][i])
plt.xlabel('Time (s)', fontsize=14)
i = 25
l = str(np.round((data['pos'][i][0] ** 2 + data['pos'][i][1] ** 2 + data['pos'][i][2] ** 2)**(0.5),1))
plt.subplot(3,3,3)
plt.plot(np.divide(data['t'],1000), data['v'][i], label=l)
plt.ylim(-80,55)
# plt.title('Radius: ' + str(np.round((data['pos'][i][0] ** 2 + data['pos'][i][1] ** 2 + data['pos'][i][2] ** 2)**(0.5),1)), fontsize=15)
plt.subplot(3,3,6)
plt.plot(np.divide(data['t'],1000), data['o2'][i])
plt.subplot(3,3,9)
plt.plot(np.divide(data['t'],1000), data['ko'][i])
# plt.ylim(0,0.0052)

** compare normox to anox wave pos
import numpy as np
from matplotlib import pyplot as plt
plt.ion()
f = open('normox_10s_r0_100/wave_progress.txt', 'r')
times = []
wave_pos1 = []
wave_pos2 = []
for line in f.readlines():
  times.append(float(line.split()[0]))
  wave_pos1.append(float(line.split()[-1]))
  wave_pos2.append(float(line.split()[-2]))
f.close()
plt.subplot(1,2,1)
plt.plot(np.divide(times,1000), wave_pos2, label='Normoxic')
plt.subplot(1,2,2)
plt.plot(np.divide(times,1000), wave_pos1, label='Normoxic')
f = open('anox_10s_r0_100/wave_progress.txt', 'r')
times = []
wave_pos1 = []
wave_pos2 = []
for line in f.readlines():
  times.append(float(line.split()[0]))
  wave_pos1.append(float(line.split()[-1]))
  wave_pos2.append(float(line.split()[-2]))
f.close()
plt.subplot(1,2,1)
plt.plot(np.divide(times,1000), wave_pos2, label='Anoxic')
plt.subplot(1,2,2)
plt.plot(np.divide(times,1000), wave_pos1, label='Anoxic')
plt.subplot(1,2,1)
plt.xlim(-0.1,8.1)
plt.ylabel('Wave Position (um)', fontsize=12)
plt.xlabel('Time (s)', fontsize=12)
plt.title('[K+] > 15 mM', fontsize=13)
plt.ylim(75,500)
plt.subplot(1,2,2)
plt.xlabel('Time (s)', fontsize=12)
plt.xlim(-0.1,8.1)
plt.title('[K+] <= 15 mM', fontsize=13)
plt.ylim(75,500)
plt.legend()

* [2020-7-21 Tue] - netpyne version of model
** looks like I've got rxd.Parameter implented in Netpyne, still testing
** netpyne version of spreading depression - fixing equation strings
*** still fucked, membrane potential values go to NaN

* [2020-7-23 Thu] - nothing spiked
** possible fix by rearranging way initial K+ is set
*** 'v0.01 - rearrange setting initial high K+ based on new netpyney dimensions'

* [2020-8-10 Mon] - back to python+neuron
** testing how long runs take
*** my, nthread=16, no mpi, start at 10:35am
*** zn, nthread=16, mpi 16, start at 10:50am WAY BETTER
** running on zn for 60s sim

* [2020-8-13 Thu] - organizing things to start writing paper
** fix ecs K+ images for correct color scale
** killed 60s run on zn - too many problems
** notes on anox_10s_r0_100
*** rough average velocity of the K+ wavefront ~ 2.4 mm/min
**** just shy of experimental range
**** gonna bump up ECS K+ in core to 60 mM
*** K+ wave front flattens out around 8s, K+ wave back(?) explodes at 8s
**** possibly a boundary condition thing
**** wave front flattens out ~ L-dendL ...
** trying out recording LFP using LF(Psimpy

* [2020-8-14 Fri] - cont from yesterday
** plotting raster from membrane potential files
import os
import pickle
import numpy
from matplotlib import pyplot
from scipy.signal import find_peaks
raster = {}
files = os.listdir('./')
mem_files = [file for file in files if (file[:8] == 'membrane')]
for file in mem_files:
  fileObj = open(file, 'rb')
  data = pickle.load(fileObj)
  fileObj.close()
  for v, pos in zip(data[0],data[1]):
    pks, _ = find_peaks(v.as_numpy(), 0)
    if len(pks):
      r = (pos[0]**2 + pos[1]**2 + pos[2]**2)**(0.5)
      raster[r] = [data[2][ind] for ind in pks]
pyplot.ion()
raster_fig = pyplot.figure(figsize=(16,8))
for key in raster.keys():
    pyplot.plot(numpy.divide(raster[key],1000), [key for i in range(len(raster[key]))], 'b.')
pyplot.xlabel('Time (s)', fontsize=16)
pyplot.ylabel(r'Distance ($\mu$m)', fontsize=16)
pyplot.xticks(fontsize=14)
pyplot.yticks(fontsize=14)

* [2020-8-17 Mon] - sorting out results from anox 10s in vivo bc
** raster plot: Figures/anox_10s_r0100_k060_invivo_raster.svg
** wave progress: Figures/anox_10s_r0100_k060_invivo_waveProg.svg
** plotting 3 example traces
import pickle
file = open('recs.pkl', 'rb')
data = pickle.load(file)
file.close()
from matplotlib import pyplot as plt
import numpy as np
plt.ion()
fig = plt.figure(figsize=(16,8))
iss = [0, 7, 15]
# iss = [0]
# iss = [0, 3, 5, 10]
# iss = [20]
for i in iss:
  l = r'%s $\mu$m' % str(np.round((data['pos'][i][0] ** 2 + data['pos'][i][1] ** 2 + data['pos'][i][2] ** 2)**(0.5),1))
  plt.subplot(2,4,1)
  plt.plot(np.divide(data['t'],1000), data['v'][i], label=l)
  plt.subplot(2,4,5)
  plt.plot(np.divide(data['t'],1000), data['o2'][i])
  plt.subplot(2,4,2)
  plt.plot(np.divide(data['t'],1000), data['ki'][i])
  plt.subplot(2,4,6)
  plt.plot(np.divide(data['t'],1000), data['ko'][i])
  plt.subplot(2,4,3)
  plt.plot(np.divide(data['t'],1000), data['nai'][i])
  plt.subplot(2,4,7)
  plt.plot(np.divide(data['t'],1000), data['nao'][i])
  plt.subplot(2,4,4)
  plt.plot(np.divide(data['t'],1000), data['cli'][i])
  plt.subplot(2,4,8)
  plt.plot(np.divide(data['t'],1000), data['clo'][i])
plt.subplot(2,4,1)
plt.legend()
plt.ylabel('Membrane Potential (mV)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,4,5)
plt.ylabel(r'Extracellular [O$^{2+}$] (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,4,2)
plt.ylabel(r'Intracellular [K$^{+}$] (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,4,6)
plt.ylabel(r'Extracellular [K$^{+}$] (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,4,3)
plt.ylabel(r'Intracellular [Na$^{+}$] (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,4,7)
plt.ylabel(r'Extracellular [Na$^{+}$] (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,4,4)
plt.ylabel(r'Intracellular [Cl$^{-}$] (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,4,8)
plt.ylabel(r'Extracellular [Cl$^{-}$] (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.tight_layout()
** Questions
*** Is it worth including a minute long sim to show Vm return to Vrest?
**** 10s - ~ 2 days on w/ 18 cores on my
*** Wave progress [K+] > Kceil flattens out, but doesn't seem to correspond to heatmaps
*** Anox vs. Normox - Obvious
*** In Vivo vs. In Vitro Boundary Conds? - may be related to doing a long sim
*** Different dend length / SA:V? Can't do realistic SA:V without realistic morph
**** talked previously about sentinal realistic morph, not sure i followed what that would show us
**** does morphology actually effect ecs diffusion? guessing not since specifying tortuosity and
volume fraction explicitly

* [2020-8-18 Tue] & [2020-8-19 Wed] - more questions
** Methods
*** How much detail from Wei et al should be repeated?
*** where are values for tortuosity and volume fraction coming from?
** running versions with *r0=100 and k0=30* on downstate hpc

* [2020-8-20 Thu]
** compute average wave velocity based on spiking:
# raster code
import os
import pickle
import numpy
from matplotlib import pyplot
from scipy.signal import find_peaks
raster = {}
files = os.listdir('./')
mem_files = [file for file in files if (file[:8] == 'membrane')]
for file in mem_files:
  fileObj = open(file, 'rb')
  data = pickle.load(fileObj)
  fileObj.close()
  for v, pos in zip(data[0],data[1]):
    pks, _ = find_peaks(v.as_numpy(), 0)
    if len(pks):
      r = (pos[0]**2 + pos[1]**2 + pos[2]**2)**(0.5)
      raster[r] = [data[2][ind] for ind in pks]
# wave velocity code
from scipy import stats
x = []
y = []
for r in raster.keys():
  for t in raster[r]:
    x.append(t)
    y.append(r)
## fit a line through spiking activity outside core - here r0=100
y_fix = [pos for pos in y if pos > 100]
x_fix = [x[i] for i, pos in enumerate(y) if pos > 100]
slope, intercept, r_value, p_value, std_err = stats.linregress(x_fix,y_fix)
## convert to mm/min
depolWaveV = slope * 1000 * (numpy.max(x)/60000)
** some results
*** conds: *r0=100, k0=60* invitro depolWaveV: 4.23467 mm/min; invivo: 4.23940 mm/min
*** comnparison of potassium waves also nearly identical
** compare two k0s
import numpy
from matplotlib import pyplot
pyplot.ion()
f = open('Data/normox_r0100_k080_30s_dx25/wave_progress.txt', 'r')
times = []
wave_pos1 = []
wave_pos2 = []
for line in f.readlines():
  times.append(float(line.split()[0]))
  wave_pos1.append(float(line.split()[-1]))
  wave_pos2.append(float(line.split()[-2]))
f.close()
pyplot.figure(figsize=(10,6))
pyplot.subplot(1,2,1)
# pyplot.plot(numpy.divide(times,1000), wave_pos2, label=r'[K$^{+}]_{0_{core}}$=40mM')
pyplot.plot(numpy.divide(times,1000), wave_pos2, label=r'1 mm x 1mm x 1mm')
pyplot.subplot(1,2,2)
# pyplot.plot(numpy.divide(times,1000), wave_pos1, label=r'[K$^{+}]_{0_{core}}$=40mM')
pyplot.plot(numpy.divide(times,1000), wave_pos1, label=r'1 mm x 1mm x 1mm')
f = open('Data/retina_normox_30s_r0100_k080/wave_progress.txt', 'r')
times = []
wave_pos1 = []
wave_pos2 = []
for line in f.readlines():
  times.append(float(line.split()[0]))
  wave_pos1.append(float(line.split()[-1]))
  wave_pos2.append(float(line.split()[-2]))
f.close()
pyplot.subplot(1,2,1)
# pyplot.plot(numpy.divide(times,1000), wave_pos2, label=r'[K$^{+}]_{0_{core}}$=60mM')
pyplot.plot(numpy.divide(times,1000), wave_pos2, label=r'1 mm x 1 mm x 170 $\mu$m')
pyplot.xlabel('Time (s)', fontsize=16)
pyplot.xticks(fontsize=12)
pyplot.ylabel(r'Distance ($\mu$m)', fontsize=16)
pyplot.yticks(fontsize=12)
pyplot.title(r'[K$^{+}$] > 15.0 mM', fontsize=16)
# pyplot.ylim(90,450)
pyplot.subplot(1,2,2)
# pyplot.plot(numpy.divide(times,1000), wave_pos1, label=r'[K$^{+}]_{0_{core}}$=60mM')
pyplot.plot(numpy.divide(times,1000), wave_pos1, label=r'1 mm x 1 mm x 170 $\mu$m')
pyplot.xlabel('Time (s)', fontsize=16)
pyplot.xticks(fontsize=12)
pyplot.yticks(fontsize=12)
pyplot.title(r'[K$^{+}$] $\leq$ 15.0 mM', fontsize=16)
# pyplot.ylim(90,450)
pyplot.legend()

* [2020-8-21 Fri] - analyzing output from some sims
** Comparison of normox vs. anox, 10s, r0: 100 um, k0: 60 mM
*** Depol Wave V:
normox = 3.42 mm/min
anox = 4.23 mm/min

* [2020-8-31 Mon] - results from just reducing o2
** files: Data/o2anox_10s_r0100_035_invivo
*** there is spreading depolarization, but very quick
*** starts ~1.25 seconds, firing over by 6s
*** going to try with more o2, maybe smaller r0
**** 50%, 100um - my, 10% 70um - au, 5%, 50um - pt

* [2020-9-3 Thu] - more on reduce o2
** compare rasters
import os
import pickle
import numpy
from matplotlib import pyplot
from scipy.signal import find_peaks
rasters = []
# dirs = ['o2anox_10s_r0100_035_invivo/', 'O2005_10s_r050_k035_invivo/', 'O205_10s_r0100_K035_invivo/', 'O21_10s_r070_k035_invivo/']
# dirs = ['invitro_15s_r0100_k080/', 'slice_normox_r0100_k080_30s_bc/']#'Data/retina_normox_30s_r0100_k080/']
# dirs = ['normox_10s_r0100_k060_invitro/', ''anox_10s_V2x_r0100_k060/']
# dirs = ['invitro_15s_r0100_k025_v2', 'invitro_15s_r0100_k025_2so2', 'invitro_15s_r050_k015', 'invitro_15s_r050_k015_2xo2']
# dirs = ['r0200_k0250_10mMO2_15s', 'r0200_k0250_10mgO2_dendL90_15s']
dirs = ['r0100_k050_23mmHgO2_15s/', 'r0100_k050_anox_10mmHgO2_15s/', 'r0100_k050_sd_23mmHgO2/']
for d in dirs:
  raster = {}
  files = os.listdir(d)
  mem_files = [file for file in files if (file[:8] == 'membrane')]
  for file in mem_files:
    fileObj = open(os.path.join(d,file), 'rb')
    data = pickle.load(fileObj)
    fileObj.close()
    for v, pos in zip(data[0],data[1]):
      pks, _ = find_peaks(v.as_numpy(), 0)
      if len(pks):
        r = (pos[0]**2 + pos[1]**2 + pos[2]**2)**(0.5)
        raster[r] = [data[2][ind] for ind in pks]
  rasters.append(raster)
pyplot.ion()
raster_fig = pyplot.figure(figsize=(16,8))
for i, raster in enumerate(rasters):
  pyplot.subplot(len(rasters),1,i+1)
  pyplot.xticks(fontsize=14)
  pyplot.yticks(fontsize=14)
  for key in raster.keys():
      pyplot.plot(numpy.divide(raster[key],1000), [key for i in range(len(raster[key]))], 'b.',  markersize=0.5)
      pyplot.ylabel(r'Distance ($\mu$m)', fontsize=16)
pyplot.xlabel('Time (s)', fontsize=16)
# pyplot.ylabel(r'Distance ($\mu$m)', fontsize=16)
** compare K+ waves
import numpy
from matplotlib import pyplot
import os
pyplot.ion()
pyplot.figure(figsize=(10,6))
# dirs = ['o2anox_10s_r0100_035_invivo/', 'O2005_10s_r050_k035_invivo/', 'O205_10s_r0100_K035_invivo/', 'O21_10s_r070_k035_invivo/']
# dirs = ['normox_10s_r0100_k060_invitro/', 'anox_10s_V2x_r0100_k060/']
# labels = ['Normoxic', 'Anoxic']
# dirs = ['invitro_15s_r0100_k080/', 'slice_normox_r0100_k080_30s_bc/']#'Data/retina_normox_30s_r0100_k080/']
# labels = ['With Glia Pump O2', 'Without']
# labels = [r'O$^{2+}$: 5%, R$_0$: 100$\mu$m', r'O$^{2+}$: 5%, R$_0$: 50$\mu$m', r'O$^{2+}$: 50%, R$_0$: 100$\mu$m', r'O$^{2+}$: 10%, R$_0$: 70$\mu$m']
# dirs = ['slice_normox_r0100_k080_30s_bc/', 'invitro_15s_r0100_k025_v2/', 'invitro_10s_r0100_k010/', 'invitro_15s_r050_k015/']#'Data/retina_normox_30s_r0100_k080/'] 
# dirs = ['r0200_k0250_10mMO2_15s', 'r0200_k0250_10mgO2_dendL90_15s']4
# dirs = ['r0100_k050_23mmHgO2_15s/', 'r0100_k050_anox_10mmHgO2_15s/', 'r0100_k050_sd_23mmHgO2/']
dirs = ['r0100_k050_23mmHgO2_15s/', 'r0100_k050_37mmHgO2/']
labels = [r'23 mmHg O$^2$', r'37 mmHg O$^2$']
# labels = [r'R$_{0}$ = 100 $\mu$m; [K$^{+}$]$_{core}$ = 80 mM', r'R$_{0}$ = 100 $\mu$m; [K$^{+}$]$_{core}$ = 25 mM', r'R$_{0}$ = 100 $\mu$m; [K$^{+}$]$_{core}$ = 10 mM', r'R$_{0}$ = 50 $\mu$m; [K$^{+}$]$_{core}$ = 15 mM'] 
# labels = ['Point Neurons', r'90 $\mu$m Dendrites']
labels = [r'Normoxia: 23 mmHg O$^2$; $\alpha$=0.2; $\lambda$=1.6', r'Anoxia: 10 mmHg O$^2$; $\alpha$=0.07; $\lambda$=1.8', r'SD: 23 mmHg O$^2$; $\alpha$=0.07; $\lambda$=2.0']
for l, d in zip(labels,dirs):
  f = open(os.path.join(d,'wave_progress.txt'))
  times = []
  wave_pos1 = []
  wave_pos2 = []
  for line in f.readlines():
    times.append(float(line.split()[0]))
    wave_pos1.append(float(line.split()[-1]))
    wave_pos2.append(float(line.split()[-2]))
  # pyplot.subplot(1,2,1)
  pyplot.plot(numpy.divide(times,1000), wave_pos2, label=l)
  # pyplot.subplot(1,2,2)
  # pyplot.plot(numpy.divide(times,1000), wave_pos1, label=l)
# pyplot.subplot(1,2,1)
pyplot.xlabel('Time (s)', fontsize=16)
pyplot.xticks(fontsize=12)
pyplot.ylabel(r'Position ($\mu$m)', fontsize=16)
pyplot.yticks(fontsize=12)
# pyplot.title(r'Wave Progress ([K$^{+}$] > 15.0 mM)', fontsize=16)
pyplot.title(r'[K$^+$]$_o$ Wave Position', fontsize=18)
# pyplot.subplot(1,2,2)
# pyplot.xlabel('Time (s)', fontsize=16)
# pyplot.xticks(fontsize=12)
# pyplot.yticks(fontsize=12)
# pyplot.title(r'[K$^{+}$] $\leq$ 15.0 mM', fontsize=16)
# pyplot.ylim(90,450)
pyplot.legend(fontsize=16)

* [2020-9-5 Sat] - control run finished
** some, fairly stochastic looking spiking going on after 4s
*** raster: Data/control_run/raster_plot.png

* [2020-9-9 Wed] - sorting out parallelization, notes for paper:
** Somjen2001-jh
*** Normoxic SD can be triggered by high-frequency
electrical pulses (“tetanic” stimulation) or direct current
(DC) (“galvanic”), mechanical stimuli such as pressure on
or puncture of the cortex, . . . In general, similar insults can
induce SD or provoke seizure discharge, and there are no simple rules by
which to predict which of the two will prevail. Severe
hypoxia or, more generally, sudden energy failure induces
an SD-like response, and “spontaneous” waves of SD
emanate from the border of ischemic foci and propagate
into the surrounding brain region.
*** The CA1 sector of the hippocampal formation is perhaps the most prone [to SD],
closely followed by the neocortex.
*** In newborn animals, SD cannot be induced. In rabbit
and rat cerebral cortex the capacity to generate SD appears
between the 10th and 25th postnatal day in different areas
*** The metabolic poisons fluoroacetate and fluorocitrate incapacitate glial cells
hours before they affect neurons (201). Yet these toxins
do not prevent SD, but rather facilitate its onset (202,
203)
*** These observations force the following conclusions.
Neither neuron firing nor synaptic transmission is required for SD generation,
nor is the activation of NMDA receptors an absolute requirement for the
generation of SD, and even less for HSD. Nonetheless, glutamate and
aspartate, as well as some TTX-sensitive Na1 channels, do play a role
*** removing calcium from the extracellular fluid does not prevent SD or HSD,
and it may even favor its onset (24, 29, 93, 255, 453)
** testing out different combos of nodes, tasks, threads, etc on downstate hpc

* [2020-9-16 Wed] - Turing, pattern formation
** maybe lack of SD in retina due to constricted space compared to cortex
a la stripes vs spots on cat tails Bard1981-yy
*** foveal thickness: 170 ± 18 μm Chan2006-ha

* [2020-9-20 Sun] - analyzing 30s runs
** compare time spent spiking
import os
import pickle
import numpy
from matplotlib import pyplot
from scipy.signal import find_peaks
rasters = []
# dirs = ['o2anox_10s_r0100_035_invivo/', 'O2005_10s_r050_k035_invivo/', 'O205_10s_r0100_K035_invivo/', 'O21_10s_r070_k035_invivo/']
dirs = ['Data/normox_r0100_k080_30s_dx25/', 'Data/retina_normox_30s_r0100_k080/']
for d in dirs:
  durs = []
  files = os.listdir(d)
  mem_files = [file for file in files if (file[:8] == 'membrane')]
  for file in mem_files:
    fileObj = open(os.path.join(d,file), 'rb')
    data = pickle.load(fileObj)
    fileObj.close()
    for v, pos in zip(data[0],data[1]):
      pks, _ = find_peaks(v.as_numpy(), 0)
      if len(pks) > 2:
        durs.append((data[2][pks[-1]] - data[2][pks[0]])/1000)
  rasters.append(durs)
pyplot.figure(figsize=(10,6))
pyplot.plot([-0.5 + numpy.random.rand() for i in range(len(rasters[0]))], rasters[0])
pyplot.plot([1.5 + numpy.random.rand() for i in rage(len(rasters[1]))]m rasters[1])
*** from mann whitney ranksum test: MannwhitneyuResult(statistic=29265.0, pvalue=5.7836523882606664e-43)
** ISSUE WITH HPC RESOLVED ITSLEF (PROBABLY SOME LIMIT THING) - CUBE AND RETINA
IN VIVO ARE REVERSED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

* [2020-9-29 Tue] 
** code for comparing o2 concentratiosn w/ and w/out glial Na/K consumption of o2 
import numpy as np
from matplotlib import pyplot as plt 
from os import listdir 
import imageio 
alpha = 5.3
oa_bath = 0.1 / alpha 
files = ['o2_'+str(i)+'.npy' for i in range(15000) if (i%100)==0] 
dirs = ['invitro_15s_r0100_k080/', 'invitro_15s_r0100_k080_nogliao2rate/']
for file in files: 
  plt.figure() 
  data = np.load(dirs[0]+file) 
  plt.subplot(1,2,1)
  plt.imshow(data.mean(2), vmin=oa_bath * 0.9, vmax=oa_bath, interpolation='nearest', origin='lower') 
  plt.title('Original: t = ' + str(file.split('_')[1].split('.')[0]) + 'ms') 
  data = np.load(dirs[1]+file)
  plt.subplot(1,2,2)
  plt.imshow(data.mean(2), vmin=oa_bath * 0.9, vmax=oa_bath, interpolation='nearest', origin='lower') 
  plt.title('No Glia O2 Consumption: t = ' + str(file.split('_')[1].split('.')[0]) + 'ms')
  # plt.colorbar() 
  plt.tight_layout()
  plt.savefig('o2rateComp/' + file[:-4] + '.png') 
  plt.close() 

times = []
filenames = listdir(path='o2rateComp')
for file in filenames: 
  times.append(float(file.split('_')[-1].split('.')[0])) 
inds = np.argsort(times)
filenames_sort = [filenames[i] for i in inds]
imagesc = []
for filename in filenames_sort: 
  imagesc.append(imageio.imread('o2rateComp/'+filename)) 
imageio.mimsave('o2conc.gif', imagesc)

* [2020-10-15 Thu] - ironing out issue w/ na flux in dends
** plotting traces for r0200, k0250, 10mM O2 
import pickle
file = open('recs.pkl', 'rb')
data = pickle.load(file)
file.close()
from matplotlib import pyplot as plt
import numpy as np
plt.ion()
fig = plt.figure(figsize=(16,8))
iss = [0,10,20]#22,25]
cols = ['b','r','g','c','m']
for c, i in enumerate(iss):
  l = r'%s $\mu$m' % str(np.round((data['pos'][i][0] ** 2 + data['pos'][i][1] ** 2 + data['pos'][i][2] ** 2)**(0.5),1))
  plt.subplot(3,4,c+1)
  plt.plot(np.divide(data['t'],1000), data['v'][i], cols[c], label=l)
  plt.subplot(3,4,9)
  plt.plot(np.divide(data['t'],1000), data['o2'][i], cols[c])
  plt.subplot(3,4,6)
  plt.plot(np.divide(data['t'],1000), data['ki'][i], cols[c])
  plt.subplot(3,4,10)
  plt.plot(np.divide(data['t'],1000), data['ko'][i], cols[c])

  plt.subplot(3,4,7)
  plt.plot(np.divide(data['t'],1000), data['nai'][i], cols[c])
  plt.subplot(3,4,11)
  plt.plot(np.divide(data['t'],1000), data['nao'][i], cols[c])
  plt.subplot(3,4,8)
  plt.plot(np.divide(data['t'],1000), data['cli'][i], cols[c])
  plt.subplot(3,4,12)
  plt.plot(np.divide(data['t'],1000), data['clo'][i], cols[c])
for c in range(len(iss)):
  plt.subplot(3,4,c+1)
  plt.legend()
  plt.ylabel(r'V$_{memb}$ (mV)', fontsize=16)
  plt.xticks(fontsize=14)
  plt.yticks(fontsize=14)
plt.subplot(3,4,9)
plt.ylabel(r'[O$^{2+}$]$_o$ (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(3,4,6)
plt.ylabel(r'[K$^{+}$]$_i$ (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(3,4,10)
plt.ylabel(r'[K$^{+}$]$_o$ (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(3,4,7)
plt.ylabel(r'[Na$^{+}$]$_o$ (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(3,4,11)
plt.ylabel(r'[Na$^{+}$]$_i$ (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(3,4,8)
plt.ylabel(r'[Cl$^{-}$]$_o$ (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(3,4,12)
plt.ylabel(r'[Cl$^{-}$]$_i$ (mM)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.tight_layout()

* [2020-11-5 Thu] - returning to this stuff after awhile 
** adam on O2 concentrations 
This article might be useful; https://elifesciences.org/articles/12024
It suggests normal partial pressure for oxygen is ~23mmHg, 
difficult to convert it to a concentration though, 
if it were in water I think it would be ~30μM but I'm not sure 
how soluble oxygen is in CSF.
Yeah, 1mmHg = 133.3224Pa, then I think you can use Henry's Law, 
but I haven't found the constant for CSF.
** Brain tissue oxygen, carbon dioxide, and pH in neurosurgical patients at risk for ischemia
W E Hoffman 1, F T Charbel, G Edelman
A sensor that measures oxygen pressure (PO2), carbon dioxide pressure (PCO2), 
and pH was evaluated in brain tissue of patients at risk for ischemia. 
The sensor is 0.5 mm in diameter and was inserted into cortex tissue in 
14 patients undergoing craniotomy for cerebrovascular surgery. 
A compromised cerebral circulation was identified in 8 of 14 patients by 
single photon emission computed tomography (SPECT) scan, cerebral angiography,
and transient ischemic episodes before surgery. Under baseline conditions with
isoflurane anesthesia and normal blood gases, tissue P02 was lower in the eight
compromised compared to six noncompromised patients 
*noncompromised 37 +/- 12 mm Hg, compromised 10 +/- 5 mm Hg; P < 0.05), 
PCO2 was increased (noncompromised 49 +/- 5 mm Hg, compromised 72 +/- 23 mm Hg;
P < 0.05), and pH was decreased (noncompromised 7.16 +/- 0.08, compromised 6.82 +/- 0.21; 
P < 0.05). Critical tissue values for the identification of ischemia were a
P02 of 20 mm Hg, PCO2 of 60 mm Hg, and a pH of 7.0. 
These results suggest that brain tissue measures of P02, PCO2, and pH provide
information on the adequacy of cerebral perfusion in neurosurgical patients.
** Henry's law 
*** H: 796.23 (atm/M) - http://butane.chem.uiuc.edu/pshapley/GenChem1/L23/web-L23.pdf
yields 3.93e-5 M 
**** 796.23 (atm/M) * 101324 (Pa/atm) * (1 mmHg / 133.32 Pa)

* [2020-11-9 Mon] - still fooling around w/ params now have handle on O2 
** volume fraction and tortuosity:
During SD in all age groups,  decreased to 0.05–0.09
while  increased to 1.95–2.07 (Table 7) Sykova2008-av

* [2020-11-10 Tue] - summarizing new sims' data 

* [2020-12-4 Fri] - trying to sort out repolarization issue 
** tried switching dt after neurons stop spiking 
*** get nan after 200 ms of increased dt 
*** goes away when commenting out k_current

* [2020-12-10 Thu] - switching dt 
** seems to work when switching to 0.5 ms dt rather than 1 ms
*** tested with short run (tstop1 = 200, tstop2 = 700)
*** testing on flatbushpc with long run - tstop1 = 20000 tstop2 = 120000

* [2020-12-15 Tue] - issues with setting initial [K+] in ecs 
** issue in netpyne, doesn't match with straight neuron + rxd 
** seems to be fixed by using +/- cfg.sizeX/Y/Z 

* [2020-12-16 Wed] - still on repolarization 
** added boundary conditions for each species 
** running for 60s on downstate hpc 

* [2021-1-4 Mon] - revisiting netpyne version 
** running smaller version on my [[Data/r0100_k050_Lx500_120s][standard run on smaller ecs]]
*** realized everything I was running last week had 5x glia pump activity 
** revisiting netpyne version 
*** just fixed up non-debugging version to match up w/ findings from debuging version 
**** FIX - needed to get rid of HH mechanism to avoid NAN 
*** new problem: K isn't diffusing 
**** FIX - added ecs_boundary_conditions to rxd species in netpyne
**** QUESTION - possible to have functional boundary condition? currently have it set up to take value 

* [2021-1-12 Tue] - no more neumann boundary conditions 
** no neumann boundary conditions - diffusion w/ constant conc outside 
*** r0=100 microns, k0=50mM, normox - no spreading depression 
**** [[Data/r0100_k050_120s_small/raster_plot.png][raster shows spiking only within and just around bolus]]
**** [[Data/r0100_k050_120s_small/example_traces_r0100_k050_normox.png][some cells spike for 10s of seconds then return to rest, most silent]]
*** r0=100 microns, k0=50mM, anox - does have spreading depression
**** [[Data/r0100_k050_60s_small_anox/raster_plot.png][raster shows spiking spreads outward from the bolus]] 
**** [[Data/r0100_k050_60s_small_anox/example_traces_r0100_k050_anox.png][typical SD traces]]
** 120s anoxic run failed over the weekend, ran 60s, still want to try 120+ to see repolarization  

* [2021-1-14 Thu] - netpyne debugging 
** added name to rxd States, doesn't help 

* [2021-1-15 Fri] - netpyne debugging continued 
** commented plotting code from *debugKdist.py* 
# pyplot.ion()
# pyplot.figure() 
# pyplot.imshow(k[ecs].states3d.mean(2), vmax=40, vmin=3.5, origin='lower', interpolation=None)
# pyplot.colorbar()
# from neuron import h 
# x3d, nx3d, y3d, ny3d, z3d, nz3d = [], [], [], [], [], [] 
# for nd in k[ecs].nodes: 
#     x3d.append(nd.x3d) 
#     y3d.append(nd.y3d) 
#     z3d.append(nd.z3d) 
# for sec in h.allsec(): 
#     nx3d.append(sec.x3d(0)) 
#     ny3d.append(sec.y3d(0)) 
#     nz3d.append(sec.z3d(0)) 
# pyplot.figure()
# pyplot.subplot(321)
# pyplot.plot(x3d)
# pyplot.subplot(322)
# pyplot.plot(nx3d)
# pyplot.subplot(323)
# pyplot.plot(y3d)
# pyplot.subplot(324)
# pyplot.plot(ny3d)
# pyplot.subplot(325)
# pyplot.plot(z3d)
# pyplot.subplot(326)
# pyplot.plot(nz3d)

* [2021-1-19 Tue] 
** trying normoxic conds with 70mM (looking for a threshold for SD)
** ISSUE: in anoxic run (Data/r0100_k050_120s_anoxic_small) [O2] goes negative 
** netpyne version - 'v0.04 - fixed issues with naming and cell volume'
*** vmemb remains constant, that's a problem

* [2021-1-20 Wed] - [o2] < 0
** [O2] dropping below zero
*** also happened when raising [O2] initial to 0.04 but keeping anoxic alpha and tortuosity
*** attempt to resolve: 'v0.24 - remove mg/mL*s conversion factor alpha'

* [2021-1-22 Fri] - netpyne updates 
** fixed up netrxd.py yesterday, merged w/ dev branch 
** 5s anoxic test run of netpyne version 
*** 'v0.05 - setup for 5s anoxic test run'
*** 'ditch plot rxd concentration because of scalebar error'
** update to createParallelContext in setup.py to disable timeout

* [2021-1-23 Sat] - back to looking for normox thresh on gcp 
** SpatialModelRealistic.py: 'v0.25 - switched alpha back for now'

* [2021-1-25 Mon] - more netpyne 
** gcp run of from [2021-1-23 Sat] failed, ran out of space to save output, deleted some redundant data folders 
** NETPYNE VERSION WORKING on gcp, had to reinstall mpich, mpi4py, neuron w/ anaconda and run the following
 [[https://stackoverflow.com/questions/43070900/version-glibcxx-3-4-22-not-found][libstdc++.so.6: version `GLIBCXX_3.4.22' not found]]
 *** 'v0.06 - second iter of test run version, 10s, record 200 cells, anoxic'

* [2021-1-26 Tue] - working on o2 and netpyne w/ mpi
** normox r0=100 k0=120 SD-like behavior from cell within the K+ bolus but doesn't spread like SD 
** [O2] < 0
*** why are only some reactions multiplied by volume_scale (only main difference between Wei's eqs and ours)
*** is alpha still necessary since oxygen is in mM rather than mg/L 
*** 'v0.26 - translated o2switch by 3e-4 mM O2 hoping to resolve negative [O2]'
** netpyne version 
*** using mpi many cells trace figs are empty, doesn't seem to be the case when running w/ ipython 

* [2021-1-27 Wed] - toyed with netpyne, same problem with empty trace figs 
** netpyne version issue w/ empty cells 
*** netParams.py: v0.07 - udpdated nkcc1 to reflect SpatialModelRealistic.py

* [2021-1-28 Thu] - anaerobic glycolysis
** more o2 dynamics 
*** SpatialModelRealistic: v0.27 - applied o2switch to o2 consumption by Na/K pumps rather than pump activity to account for anaerobic glycolysis
*** results from shifted O2switch [[./Data/r0100_k050_anoxic_30s_adjustO2switch/][cell ~90um O2 still drops below zero but on order of 10^-6 mM . . . i think that's ok]]

* [2021-1-29 Fri] - updates from yesterday
** running sim on gcp ... taking forever (only 20% finished since yesterday)
** paper on anaerobic glycolysis in brain (NO PDF) Schurr1998-jg

* [2021-2-20 Sat] - back at it 
** SpatialModelRealistic.py - 'v0.28 - switch back on pump, upped translation to 5e-4'
** rerunning anoxic conds for 120s on gcp 

* [2021-2-25 Thu] - constantly infusing K+
** SpatialModelRealistic.py: 'v0.29 - trying constant infusion of K+, turn of saving figs for gifs'
*** testing on gcp
** enabled github two factor auth, stored token, maybe the last one

* [2021-3-3 Wed] - more constant K+ infusion 
** first version from [2021-2-25 Thu] didn't work out 
*** K+ distinuishably different from anox, single bolus at 2s, clearly so at 3s 
** plotting.py: 'v0.0 - tools for plotting simulation data, compare K diffusion in two conds' 
** running k0=50,75,100; infusing over 100 um core on for 5s on gcp 

* [2021-3-4 Thu] - fleshing out continous infusion 
** 'plotting.py: v0.1 - generalized compareKdiffuse for arbitrary list of data folders'
** promising results from continuous K infusion over 100 um core 
*** may mor may not get SD w/ 50 mM K+, almost definitely w/ 75 and 100 mM, need to run for longer 
*** running each scenario on gcp for 20s 
*** also trying anoxic one at lower K+ (20mM)
** 20 s runs
*** SD w/ 50 and 75 mM, but looks slow 
*** great looking SD for 20 mM anoxic 
*** running 20 mM for normoxic on gcp 
** 'SpatialModelRealistic.py: v0.30 - added option for 2mm x 2mm x 170 um'
** big run 
*** running 2mm x 2mm x 170 um for 2 min, anoxic 20 mM (start time 2:45pm)
** good question for the paper: how much higher does Na/K pump activity need to be to prevent SD?
** 'SpatialModelRealistic.py: v0.31 - removed anox oa_bath'
*** running small anox version dor 20s w/ regular O2 (so just tort and alpha anoxic)

* [2021-3-5 Fri] - plotting funcs and pumps for brainstem resilience 
** 'SpatialModelRealistic.py: v0.32 - removed dependence on o2switch altogether'
*** running 10s, anoxic, no pump O2-dependence, 20 mM cont infuse on gcp 
*** starting point for looking into possiblle brainstem SD resistance 
** 'plotting.py: v0.2 - added functions for plotting raster sorted by radial distance from center and heat map of spike frequency'
** 'SpatialModelRealistic.py: v0.33 - neuronal pump x100' **
*** 100x on neuronal pumps slowed SD down, but didn't eliminate it 
*** trying 100x on both neuronal and glial pumps 

* [2021-3-6 Sat] - more on brainstem resilience 
** ran pump x1000, O2 dropped to 0 almost instantly, trying original O2 bath from adam's code
*** 'SpatialModelRealistic.py: v0.34 - back to original oa_bath, no increase in pump activity'
** killed big sim on gcp - slowed down immensely, probably running out of memory
** Hobohm1998-gk - low expression of ECS matrix / perineural nets in brainstem regions: implies reduced tortuosity

* [2021-3-7 Sun] - same as yesterday
** increasing O2 to 0.1 mM as original, doesn't really influence anoxic SD for infusion
** things to figure out 
*** alpha vs tort vs O2
*** can Na/K pumps account for resilience  
** 'SpatialModelRealistic.py: v0.35 - user speecifies whether to infuse and factors for neural and glial Na/K pumps' 

* [2021-3-8 Mon] - running more sims 
** sim updates
*** sims running on gcp from yesterday only 1/4 done
*** running 40 mM, normoxic, original O2 value, no infusion on zn
*** running 40 mM, just tortuosity changed, original O2 value, no infusion on el

* [2021-3-9 Tue] - brainstem, normox threshold, meeting notes
** sims on gcp 50-60% done 
** higher threshold for SD in normox, looks slower too 
** brainstem resilience:
*** Ogawa1985-xz 
**** The average cell density was similar in the gray and white matter
(55000-56000 cells/mm3). [might refer to oligodendrocytes]
****  volume fraction of only 34% [again, not totally convinced]
*** Hobohm1998-gk
**** low expression of ECS matrix / perineural nets in brainstem regions: 
implies reduced tortuosity
*** Richter2003-lx
**** found brain stem susceptible to SD in immature rats, not in adults 
**** cites Bures J, Bure ˇ sova O, and Krivanek J. ˇ The Mechanism and Applications of
Leao˜ ’s Spreading Depression of Electroencephalographic Activity. Prague:
Academia, 1974, saying resilience may be due to low cell density 
** No infusion, K0=40mM, same volume fraction as normoxic, increased tortuosity: NO SD
*** Resistance to decreased volume fraction may contribute to brainstem resistance to SD 
** notes from today's meeting 
*** bill doesn't seem convinced of utility of brainstem stuff, but also not totally against it
*** TODO: adam asked about K+ concentrations for normox K+-infusion SD 

* [2021-3-10 Wed] 
** sims on gcp 88-95% done as of this am 

* [2021-3-11 Thu] - Vmemb heatmap and brainstem params sim 
** plotting.py: v0.3 - added function for plotting Vmemb heat maps 
** SpatialModelRealistic.py: v0.36 - user specification of cell density and option for brainstem-like volume fraction
** running brainstem-like sims on gcp at various [K+] values for 5s

* [2021-3-12 Fri] - updates on brainstem-ish sims 
** probably should have made tort0=tort1, but otherwise seemed like 50+ mM initiated SD just fine

* [2021-3-15 Mon] - increasing efficieny of O2 usage 
** SpatialModelRealistic.py: v0.37 - attempt at 10x pump use of O2 effeciency (as if 10x more o2ecs)
*** running 10s anoxic version on gcp

* [2021-3-18 Thu] - plotting heatmaps and probing excitability 
** spike frequency heat map met w/ approval 
*** 140 Hz not unreasonable
** bill suggested probing excitability before SD and after the spreading excitation 
*** SpatialModelRealistic.py: v0.38 - adding stimulation
*** testing stim at baseline conds, no excess K+, on gcp 
*** different cells have different rheobase - guessing probably has to do with cell density 
*** testing train of stims of varying amplitude to find rheobase 

* [2021-3-19 Fri] - more excitability and heatmaps 
** review of baseline rheobase sim 
*** most cells start firing after a couple stims, but a few don't at all 
*** a couple cells start firing a few seconds after stims 
**** [[Data/testStimTrain_baselineConds_10s/traces/\[-147.07855464781315\,\ 34.27638850179791\,\ -1.3232086799753107\].png][fires around 9s]]
*** running with a couple more stims to hopefully catch the non-spiking cells 
*** plenty of trouble getting last few to spike, going up to 0.1 nA - which works 
*** running with stims after the SD on gcp 
** vmemb heat maps running painfully slow in serial  
*** plotting.py: v0.4 - parallelized Vmemb heat map analysis
** vmemb heat map came out decent: [[r0100_k050_120s_anoxic_small_vmembHeatMap.svg][might want to switch to log time]]

* [2021-3-21 Sun] - seems like decent results on rheobase sims 

* [2021-3-22 Mon] - excitability and save state 
** got at least some cells to spike from current stim after SD 
*** plotting.py : v0.05 - added function for computing rheobase from stimulated cells
** trying state save from adam's code https://github.com/neuronsimulator/nrn/blob/83a4f92f863426d98d380f202b0dfee2cfc5353f/share/lib/python/neuron/rxdtests/do_test.py
*** SpatialModelRealistic.py: v0.39 - attempting state saving

* [2021-3-25 Thu] - savestate, prep for meeting tomorrow 
** working the past few days on finding a steady state because of heterogeneity in exitability stims 
*** restoreSim.py: v0.01 - just restoring ephys
**** eventually got working, need to contain restore code in func, call finit before define run 
*** SpatialModelRealistic.py - v0.40 - only save rxd using collect... use savestate for ephys
** for savestate EVERYTHING MUST BE THE SAME
** somjen review
*** "[K1]o does not start to increase ahead of the DVo, as it should, if K1 were the agent 
of the propagation of SD (134, 219)"
*** Grafstein’s Potassium Hypothesis: According to Grafstein
(110), K1 released during intense neuron firing accumulates
in the restricted interstitial spaces of brain tissue, and the
excess [K1]o further depolarizes the very cells that released
it, resulting in a vicious circle that leads to inactivation of
neuronal excitability. In the meantime, some of the accumulated K1 diffuses 
through the interstitial spaces to neighboring cells, which then also depolarize,
fire, and go through the same cycle, thus producing the slowly propagating wave of SD
**** but key to ignition 
*** not proven, but interstitial volume fraction may be main contributor to SD sucesptibility 

* [2021-3-26 Fri] - meeting w/ sabina and frank 
** meeting topics outline 
*** the model
**** extends work of Wei et al. to a tissue-scale model + extracellular diffusion, glial K+ uptake, multicomparment cells 
**** can recreate SD with realistic velocities 
**** includes volume fractions and tortuosities for anoxic and normoxic conditions 
**** currently there is no connectivity 
**** single "bolus" vs. continuous infusion of K+
*** working on 
**** comparisons of cell excitability before and during SD 
**** adding connectivity (probably not for first paper)
**** adding oxygen sources (" ")
*** prelim results 
**** model produces SD like effects, supporting wei's framework 
**** cannot elicit SD w/ reasonable (or what I think are unreasonable) levels of K+ from single bolus, needs continuous infusion 
***** seems to be primarily mediated by volume fraction 
***** supports notion, as somjen puts it, interstitial volume fraction is main contributor to SD sucesptibility 
**** SD faster in anoxic vs. normoxic condition 
***** need to verify, as this is an older result 
**** doesn't seem to support the gap junction theory of SD spread 
*** considerations for paper 
**** worth trying to illicit SD through stimulating cells w/in a core region?
**** how big is big enoug?
**** how long is long enough?
** putting togethe figs 
*** plotting.py: v0.06 - added raster function sans plotting 
** save state 
*** works without the rxd stuff 
*** rxd restore parts of the function work, but seg fault when start running 
*** RUNS BUT DOESNT WORK

* [2021-3-29 Mon] - debugging savestate 
** back to debugging 
*** run statement: 
python3 -i restoreSimV2.py --nthreads=20 --nrec=100 --k0=50 --r0=100 --tstop=600 --size=small --ox=anoxic --dendL=90 --restorePath=Data/saveStateTest_500ms_v2/ Data/restoreSimTest_600ms_v0/
*** produces NaNs for "steady state" runs, keeps numbers for SD runs, but doesn't come out right / same as straight run 

* [2021-4-6 Tue] - savestate works 
** restore state working, but not with h.SaveState.  instead, set v's "manually"
*** might be because there are no other states than v (m, n, h all done with rxd)
*** TODO: create issue on nrn github 
*** restroeSim.py: v0.00 - working script for restoring SD sims 
*** trying w/ BBSaveState 

** debug savestate
*** savestate disturb state?
*** restore then save create same files as original savestate? 

* [2021-4-8 Thu] - steady state 
** using adam's suggestion:  fixed ECS concentrations using parameters rather than species 
*** seem to have achieved rough steady state 
*** see intracellular concentrations and v_init in *debugSaveState.py*
nao_initial = 144.0
nai_initial = 22.5 #18.0
gnai_initial = 18.0
gki_initial = 80.0

#MODIFIED -- original 142.5, 7.8 ---
ko_initial = 3.5
ki_initial = 133.0 #140.0
clo_initial = 130
cli_initial = 3.8 #6.0

oa_bath = 0.1 # original value from adam's code
v_initial = -74.7

* [2021-4-9 Fri] 
** taking parameters from single cell, running in "full" model 

* [2021-4-27 Tue] - dynamic volume fraction and tortuosity 
** talked to sabina about modeling changes in vf and tort  
*** before adam finishes w/ updating rxd.Extracellular for dynamic vf and tort
could run simulation with them as states.  vf based on osm and equations from 
message w/ bill and sabina, tort be proportional to vf 
** savestate problem
*** saving state effects rxd variables during the simulation 
*** haven't looked closely at restoring yet 

* [2021-4-28 Wed] - more save state
** restore single cell HH tutorial 
*** all rxd names must be unique for it to work (change ecs parameter names to ion_ecs)
*** need to set h.t = final time of sim in restore function, but still saves inital value 
for 0->t0 for Vs
*** SpatialModelRealistic.py: v0.41 - cleaned up saving, not useing SaveState; 
restoreSim.py: v0.01 - cleaned up restoration and added simplified saving 
** issue with using ParallelContext.psolve when setting h.t in restoreSim()
*** questions posed on slack
**** sort of related problem: when I restore after manually saving rxd and voltage data, 
I'm having trouble with resetting h.t and using h.ParallelContext.  I'm setting 
h.t = tstop1 #end of restored sim in the function passed to h.FInitializeHandler.   I get 
an error if I'm using pc.psolve(pc.t(0)+h.dt).  This might be because pc.t(0) = 0.  If I 
instead use pc.psolve(h.t+h.dt), no error, but it's like the sim starts at h.t=0 from the 
restored state and runs to tstop2 even though I set h.t=tstop1 when initializing.  
Otherwise, if I'm not using ParallelContext, and just using h.continuerun(), it seems to 
work OK.  The one small problem is that the vectors, like for voltage, get population with 
the final value from the restored sim for 0 <= t <= tstop1
**** tl;dr - is there a way to set the sim time so pc.t(0) can be arbitrarily assigned?
**** Craig  9:47 PM
any reason to use ParallelContext.psolve rather than h.fadvance if using fixed time step
and there are no connections between cells?
ramcdougal  9:49 PM
I'll defer to Adam here, but I suspect fadvance wouldn't handle the mpi calls necessary 
to update changes to the extracellular space. That is, each compute node contributes to 
changes in extracellular potassium
9:50
Diffusion in the extracellular space is a connection between cells (edited) 

* [2021-4-29 Thu] - again, more save state
** created conda env for neuron development - seems i may have to solve my 
save/restore state problems on my own
** restoreSim.py: try fadvance rather than psolve
*** still has weird continuity issue 
*** trying w/ SpatialModelRealistic using fadvance too 
** current issue:
Craig  4:30 PM
It seems that the manual state restoration I have been doing doesn't quite work.  
Below are traces from a sim that was saved at 70 ms, then restored and ran for 
another 30 ms (from the HH tutorial).  Even though I'm setting h.t = 70 before 
running the restored sim, the vector for time has it's first entry as 0.0 and 
it's second as 70.0 + h.dt, and the vector for voltage has it's first entry as 
the restored value (i.e. V(t=0.0) = restored V).
zooming in, you can see that orange line from  0 < t < 70 ms is not flat and 
there's a discontinuity between blue and orange at 70 ms
none of the options for the first argument to h.FInitializeHandler fixed this 
(I'm showing the output from 1, which is the most sensible)
4:33
any suggestions?  seems related to the problem w/ pc.t(0) above
4:34
also, seems trivial/OK here, but getting some more dramatically strange behavior
in the SD model because of what I assume is the same issue (edited) 
adamnewton  4:49 PM
Is the problem with recording h.t?
4:52
If you didn't set h.t=70 and just added 70 to the vector that recorded h.t, 
would it look okay?
Craig  4:53 PM
will give that a shot
4:58
so, not really.  I think the problem with that is that there are stimuli after 
70ms, so when I restore but start from h.t=30, those stimuli don't occur
adamnewton  5:05 PM
I guess you could set h.t=70 then set the first entry of the vector to 70 at 
the end?
Craig  5:10 PM
i think that it is a deeper problem than just the recording, because fadvance 
(or psolve) seems to be computing the next value with the dt 70ms.
5:13
for instance, from the SD, the blue line is the original sim, and the orange is 
restored.  The first entry in the restored sim's vector is the same as the last 
in the saved sim's vector, but rather than V continuing to as in the blue trace, 
it drops:
adamnewton  5:18 PM
So you are calling finitialize, setting h.t=70 and calling fadvance, then h.dt 
is 70?
Craig  5:19 PM
I set h.t=70 in the function I'm passing to FInitializeHandler
5:19
although, i may be wrong about that being the issue w/ why I'm getting that drop 
in the SD sim
5:20
maybe i should be creating the vectors after initializing
Craig  5:27 PM
that can't be it - end up with empty vectors

* [2021-4-30 Fri] - dynamic vf and tortuosity
** dynamicECS.py: v0.0 - clone of SpatialModelRealistic.py, trying out dynamic 
alpha, adding tort later
*** definitely doesn't work out 
*** [[Figures/example_vir_vs_time_anox.svg][after two minutes, highest swelling is 0.7%]]
*** If we assume an extracellular space volume of 20%, and accept that the
inflection point chosen for our normalization procedure does estimate maximum 
cell swelling, then the increases correspond to 7% and 10% increases in cell 
volume. Olsson2006-qw

* [2021-5-2 Sun] - ECS volume dynamics 
** ECS volume as function of soma radius: *plotVolumeInfo.py*
** [[Figures/acceptable_radii.svg][r>12.0 means Vglia < 0.0, which is nonsense]]
** Wei on volume:
Volume dynamics. The dynamics of cell volume is modified from the
work of Kager et al. (2002, 2007). The extracellular volume is 14.29% of
the initial cellular volume at the resting state in the absence of osmotic
pressure gradients and maximally shrinks to 4% of the initial cellular
volume at spreading depression (Jing et al., 1994). The cellular volume
was therefore not allowed to expand beyond the limits (110.29% of the
initial cell volume) imposed by the extracellular volume in the model, so
that the total sum of extracellular volume and intracellular neuronal
volume is constant at 114.29% of the initial neuronal volume after (Kager
et al., 2002, 2007)
** [[Figures/example_volRatios_normox20sk075.svg][in normox, ecs shrings by 1 % after 20s]]
** Wei's vs. Our Volume Dynamics:
*** Wei
Vol = 1.4368e-15;
r1 = Vol/Voli; # Vol - previous time step volume 
r2 = 1/beta0*Vol/((1+1/beta0)*Vol-Voli);
Ai = 132;
Ao = 18;
pii = Nai+Cli+Ki+Ai*r1;
pio = Nao+Ko+Clo+Ao*r2;
tau = 0.001;  
Vol_hat = Vol*(1.1029-0.1029*exp((pio-pii)/20));
dotVoli = -(Voli-Vol_hat)/0.25*tau;  
*** Us
vtau = 1/250.0
avo = 6.0221409*(10**23)
osm = (1.1029 - 0.1029*exp( ( (nao + ko + clo + 18.0)/vor - 
                             (nai + ki + cli + 132.0)/vir)/20.0))
scalei = (avo*1e-18)
scaleo = (avo*1e-18)
vol_dyn = rxd.MultiCompartmentReaction(vir, dump[ecs],
                                       -scalei*vtau*(osm-vir),
                                       mass_action=False,
                                       membrane=mem,
                                       scale_by_area=False,
                                       membrane_flux=False)
vol_dyn_ecs = rxd.MultiCompartmentReaction(dump[cyt], vor,
                                       -scaleo*vtau*(osm-vir),
                                       mass_action=False,
                                       membrane=mem,
                                       scale_by_area=False,
                                       membrane_flux=False)
*** [wei] pii and pio are scaled by r1 and r2, respectively vs:
[us] pii and pio are scaled by 1/vir and 1/vor, respectively
*** [wei] tau/0.25 = [us] vtau 
*** [wei] Vol_hat = [us] osm / Vol [wei]
** main questions:
*** should we individually model swelling of neurons and glia separately or 
lump them together as intracellular volume?
**** we could set somaR so initial volume ratios of both are equal,
otherwise might be good for parameter search - different rates of swelling 
and impact on SD 
*** how to reconcile differences between wei and our volume dynamics 
**** wei fig4 shows pretty dramatic changes (presented as ratio of intra to extra)
**** "extracellular volume is 14.29% of the initial cellular volume" seems absurd.
maybe they mean ECS volume fraction is 0.14
**** where do scaleo and scalei come from?
**** differences between [wei] dotVoli and [us] -scalei*vtau*(osm-vir)?

* [2021-5-3 Mon] - more on ECS 
** [wei] Beta = 7, soma radius = 7 um, [us] alpha = 0.2 not compatible 
*** Beta defined as Vecs/Vintracellular (not clear if neurons or neurons+glia)
*** [[Figures/beta0_and_alpha.svg][params from wei not compatible with ECS data]]
**** For Beta of 7um, R must be > 14, which means Vnrns/Vtissue > 1 and Vglia/Vtissue<0

* [2021-5-5 Wed] - sims for paper 
** takeaway from yesterday's meeting: write a paper on the model as it is 
** SpatialModelRealistic.py: v0.42 - reinstated oa_bath differences, ditched saving, no stims, mini size
** sims for paper 
*** Look for recovery: very small anoxic, bolus, k0=40, 10 min, invitro
**** running on gcp 4466
*** Good Anoxic: large anoxic, bolus, k0=40, 2 min, invivo
**** looked like 2min wasn't enough, previously did k050 w/ dends, depol wave passed in 2min
**** running on gcp 4943
*** Good Normoxic: large normoxic, infuse, k0=70, 2 min, invivo 
*** Normoxic Threshold: 
**** small, infuse, k0=40, 1 min, invitro
***** running on zn 313879 *DONE* 
**** small, infuse, k0=50, 1 min, invitro
*****  running on zn 315408 *DONE*
**** small, infuse, k0=60, 1 min, invitro
***** running on zn 316660
*** Anoxic Threshold:
**** small, infuse, k0=20, 1 min, invitro 
***** running on zn 317187 *DONE* 
**** small, infuse, k0=15, 1 min, invitro
***** running on zn 571676
**** small, infuse, k0=10, 1 min, invitro
***** running on ag 23869

* [2021-5-6 Thu] - cont from yesterday 
** Good Anoxic still running, mini 10 min failed, relaunching with less saving 
*** SpatialModelRealistic.py: v0.43 - reduce saving interval for mini sized / long run sims 
*** rerunning mini on gcp 66801: less saving, record fewer nrns - crashed again, other sim running slow, putting off 

* [2021-5-7 Fri] - methods section 
** Model Overview 
\section*{Materials and methods}
We developed a tissue-scale model of cortical spreading depression based largely
on Wei et al. (2014).
The model consists of a realistic cell density of 90,000 simplified neurons per mm$^3$ 
embedded in a 3-dimensional extracellular space (ECS) encased in a small 
extracellular environment with glial clearance of extracellular potassium.
Ionic species were exchanged between the ECS and neurons and diffused through the ECS.
Spreading depression was initiated by either a single bolus of elevated \k\ at the onset
of the simulation or constant infusion of \k\ in the center of the ECS volume.
Ischemic conditions were modeled by appropriate adjustments to ECS properties and
the availability of \o2. 

\subsection*{Neuronal Models}
We used neuron models with simplified geometries containing voltage-gated \na\ and
\k\ currents; \na/\k/2\cl\ and \k/\cl\ cotransporters; and \na/\k\ pump 
currents (\fref{schematic}).
The neurons were either spherical, with a single compartment of radius 10 $\mu$m, 
or had a single-compartment spherical soma with radius 10$\mu$m and a 
single-compartment passive dendrite 90 $\mu$m long with radius 4 $\mu$m.
Membrane potential (\vmemb) of each neuron is modeled by modified Hodgkin-Huxley
equations.
Reversal potentials used to compute \vmemb\ were calculated with the Nerst equation.
The volumes of the cells were allowed to dynamically change based on the difference
between the extracellular and intracellular osmotic 
pressures \cite{Kager2007-xb, Kager2002-ct, Wei2014-fj}
Intracellular and extracellular concentrations of species were scaled by the 
relative change in neuron and extracellular volume, respectively.

* [2021-5-24 Mon] - return after week of netpyne course 
** surface area business 
*** different progression of SD when cells have dends 
*** total surface area w/ dends is 1.916x higher than just spheres 
*** running high density (x1.917) spheres, and low density (45000) w/ dends on downstate hpc 
** search for recovery - running 5 mins on downstate hpc 

* [2021-5-27 Thu] - update of sims from monday 
** no difference between low density and regular cortical density 
** big difference with high density 
*** maybe look at intermediate 
** 5 min anoxic still running 

* [2021-6-4 Fri] - starting to put figs together 
** Different densities / surface areas 
*** at low and regular cell densities for spherical cells, 
K+ drops until wave starts going 40s in
*** running 2 min no init elevated K+ in anoxic on zn
*** running 5 min sims of different densities of spherical cells on downstate HPC 
** combo vmemb and raster plotting
*** plotting.py - v0.07 - added plotting K+ wave position for multiple sims, working on combo Vmemb and raster

* [2021-6-7 Mon] - checkup on sims from friday 
** No elevated K+, no SD - good
** 5 min sims of different densities still running (~70%)

* [2021-6-8 Tue] - meeting notes 
** results from different cell densities / total neuronal surface area 
*** [[Figures/nrnDensity_orSA_wavePos.svg][3 densities of spheres, 1 example w/ dends]]
**** how to proceed? fill out densities, increase SA by increasing radius, ball & stick vs ball 
**** interesting dip in wave position
** figure 1
*** thinking schematic + K+ diffusion heatmaps + Vmemb heat map w/ white spikes
**** maybe include firing frequency heatmap?

* [2021-6-10 Thu] - sorting out density / volume / surface area 
** critical mass for SD 
*** 200 x 200 x 170 (mini) SD like activity at 45 um, not at 80 um , biphasic firing at 90 um
** different low density results 
Craig  12:08 PM
Unrelated to the rxd issue - We talked yesterday about keeping the neuron density 
the same but seeing if having spheres w/ equal surface area to the ball+sticks 
changed the dynamics, but unless I change the dimensions of the ball and stick, 
the volume of the neurons exceeds the volume of the ecs
billl  12:09 PM
make ecs bigger?
12:09
or will be too slow
Craig  12:09 PM
bigger ecs w/ constant neuron density . . . would still be bigger right?
billl  12:09 PM
i would think that the spheres would exceed before the b/s would? -- 
isn't a sphere the most volume youcan get for give surface area?
12:10
reduce neuron density
ramcdougal  12:10 PM
are you saying physically? like the volume of your cells is just bigger than the 
volume of their bounding box…
Craig  12:10 PM
yeah
ramcdougal  12:10 PM
so that’s probably not realistic modeling :slightly_smiling_face:
Craig  12:10 PM
unless i have an algebra problem somewhere
billl  12:10 PM
bounding box has to enclose cells so can't be
Craig  12:11 PM
yeah, but as long as the cell positions are within the box, i don't think NEURON 
minds
ramcdougal  12:11 PM
yeah, NEURON doesn’t care, but…
Craig  12:12 PM
i know, not saying i should/will run that
12:14
but re bill's surface are point/question - i started off with a fixed number of 
ball+sticks w/ ball radius 10um , stick radius 2um and height 90um.  originally 
compared that to the same number of spheres sans sticks/dends with same ball 
radius
ramcdougal  12:15 PM
note that surface/volume ratio is important for rxd dynamics
12:16
so sphere’s with equal area won’t do, but you can do cylinders with the same 
area and volume (but obv, in your original surface/volume is non-constant)
adamnewton  12:17 PM
I think you could scale the neuron's intracellular volume while keeping the same 
surface area by using a fractional volume geometry for the cytosol, something like 
rxd.FractionalVolume(cyt_frac, surface_fraction=1)
Craig  12:26 PM
i'm a bit confused now about what to actually look it. figure i want to keep the 
cell density / number of cells constant
12:27
i mean,  can density is an parameter i can vary, seems like an interesting result 
even if obvious it will change dynamics- but getting more at this surface 
area/volume thing (edited) 
adamnewton  12:29 PM
Yeah, maybe keep density and volume constant, then look at the effect of 
changing surface area?
Craig  12:30 PM
ok, yeah, can give that a shot
adamnewton  12:40 PM
This paper suggests neuronal volume fraction is 0.24 and glia volume fraction 
0.37; https://paperpile.com/app/p/f3d174cf-beab-0c9c-b905-6187f5e65587
Craig  12:43 PM
thanks.  right now with sphere with radius 10um, it's closer to 0.37 for the 
neuronal volume fraction, but can shrink those down a bit
billl  12:53 PM
that's close enough i'd say -- 20-40%

* [2021-6-11 Fri] - con't from yesterday 
** turned out spheres weren't spheres, but cylinders, and height was diam not radius
*** volume of neurons is still ok as is
** adam suggests keeping cell density and cell volume constant, change surface area 
*** change surface area by changing somaR 
*** keep volume constant by using *rxd.FractionalVolume(cyt_frac, surface_fraction=1)*
**** cyt_frac = Rs1**3 / Rs2**3 where Rs1 is original, Rs2 is new 
**** for volume fraction of neurons R = 7.515
*** SpatialModelRealistic.py: v0.44 - user specifies surface area to vol ratio, calculates cell radius and fractional cell volume to keep neuron volume fraction 0.24
** mini vs. small 
*** do get SD in mini but takes longer for wave to get going than in small *
[[Figures/mini_vs_small_wave_prog.svg][compare wave position in two conditions]]
*** trying out comparison to large 
** sims on downstate hpc still humming along 

* [2021-6-15 Tue] - return to savestate 
** cleaned up repo
*** different scripts for with rxd and without 
** saving no longer breaks rxd 
** same error for restoring both with and without rxd, emailed Michael Hines 

* [2021-6-17 Thu] - realistic surface area to volume ratio 
** SA/V=3, k0=50mM -> Depolarization wave speed ~7mm/min: high end of experimental range 
*** [[Data/sa2v3/raster_plot.png][shorter bursts of spiking, up to 600um from center in ~5s]]
*** might be best sim for at least draft of Figure 2 (assuming Fig1 is methods)
** SA/V=3, k0=30mM -> very similar results to above 
** plotting.py: v0.08 - combined heatmaps for vmemb and spike freq for single figure 

* [2021-6-18 Fri] - save state working, more SA/V
** SaveState is working, everything *MUST BE THE SAME*, should use same file for save/restore 
*** SpatialModelRealistic.py: v0.45 - save state at end of the sim, option to restore state 
** Running big 2mm x 2mm x 170um sims now since at least for sa/v=3 wave is so fast
*** unchange SA/V with simple cells such that neuronal volume fraction is correct on gcp 
*** also SA/V=2 on GCP 
*** SA/V=3 on zn 
** Figure 2 
*** log vs linear time for heat maps 
*** DONE: look into stepping of vmemb 
***  DONE add time to gifs and (DONE) pick out some static K+ diff plots
*** DONE (if practical): K+ diffusion gif with cells firing blinking 

* [2021-6-22 Tue] - updates from vacation 
** finished running a few SA/V runs, moving on to densities and normox 
** plotting.py: v0.09 - add times to gifs
** normoxic has SD when SA/V=3, just slower than anoxic 

* [2021-6-23 Wed] - new version of gif 
** plotting.py: v0.10 - fig with combo of k diffusion and spiking

* [2021-6-24 Thu] - putting figs together 
** plotting.py: v0.11 - single function for combo figure(s)
** running density=40k on gcp 
** started on figures 
[[https://docs.google.com/presentation/d/1FVg3nqCL8kaBhAiH893aPw5IxiEGGjurzLayAwufcl0/edit?usp=sharing][fig slideshow]]
** running bigger version of anox on zn to see if levelling off is edge effect

* [2021-6-29 Tue] - compiling results from last week 
** new wave position figures 
*** [[Figures/wavePosVsTime_nrnDensity.svg][density of neurons]]
*** [[Figures/wavePosVsTime_nrnSAtoV.svg][different surface area to volume ratios]]
*** [[Figures/wavePosVsTime_anoxVsNormox.svg][compare anoxic to normoxic conditions]]
** seems like jumps are an edge effect:
*** [[Figures/wavePosVsTime_compareSizes.svg][compare big to bigger for edge effects]]

* [2021-6-30 Wed] - working on save state issue
** SpatialModelRealistic.py: v0.46 - ditch mpi4py, run with nrniv rather than python3
** SpatialModelRealistic.py: v0.46b - ditched argparse, loading arguments from json file 

* [2021-7-1 Thu] - save/restore seems to actually works now 
** needed to switch from cmd line args to json sim configs 
*** created new folder for sim configurations 
*** genCfgs.py: v0.0 - script for generating sim configs for SpatialModelRealistic.py
*** running two second runs on downstate BigMem node and zn (anox and normox)

* [2021-7-5 Mon] - save/restore does not in fact work 
** running big, long sims 
*** all normox, sa:v=3 (zn), 2, 1, 0.02 (downstate hpc)
** normox depolarizes as well, ~2x delay compared to anox 
*** [[Figures/noelk_kDiff.gif][compare K diffuse for normox and anox]]
** save/restore not working for SpatialModelRealistic.py 
*** SpatialModelRealistic.py: v0.46v - tried moving reinstation to just before calling run()
*** seems to work, at least with default values defaults 

* [2021-7-6 Tue] - try to fix depol in normox 
** convo with adam:
adamnewton  10:40 AM
We probably don't want depolarization in the normoxic conditions, so should 
the pump rates should be larger?
10:42
It might be possible to work out what the pump current should be for the 
equation for Ko, or by putting a single cell is an appropriate volume of ECS 
and doing a parameter sweep.
10:44
Or are the individual cell balanced, it's just when a lot of them are in the 
same voxel small changes in K are amplified?
Craig  10:44 AM
yeah, i can try changing the rate or the available O2 - it was originally 0.1 mM,
but brought it down to 0.04 (for normox) based on the ~23 mmHg
10:47
awhile back i tried looking for steady state values for the concentrations using 
a single cell placed in the ecs (not sure if it was appropriate volume, 
especially now that the SA:V has been changed pretty dramatically)
adamnewton  10:49 AM
Yeah, I'd try increasing the pumps to give the same rate as the original, the 
paper suggested it had a stable steady-state, but I didn't check,
Craig  10:51 AM
all right, will do
** first trying normox oa_bath = 0.1, also trying 10x nrns and 10x nrns & glia pumps 

* [2021-7-7 Wed] - still trying to fix depol in normox 
** makes no difference to eliminate O2 consumption 
** no O2 consumption + 1000x for both pumps -> no depol 
*** loses the joint dependence on Kecs and Nai 
** trying altering p_max, which does maintain joint dependence on Kecs and Nai 
*** p_max = 80 -> way too hyperpolarized 
*** p_max = 8 -> prety reasonable dynamics, no big depolarization when no O2 consumption 
**** can't get SD with normox and k0=40 (trying infuse)
*** SpatialModelRealistic.py: v0.47 - user specification of p_max 
*** p_max = 4 -> same problems as p_max = 8 

* [2021-7-8 Thu] - same problem continued 
** trying other parameters for increasing pump activity
*** plotPumpActivity.py: v0.0 - script for exploring parameter space of Na/K pump activity 
*** SpatialModelRealistic.py: v0.47b - looking for no depol for normox by increasing pump activity - changed parameter in equation for p
*** only parameter that seems to have serious impact is p_param in plotPumpActivity.py 
*** SpatialModelRealistic.py: v0.47d - user specifies param in equation for p, toggles O2 consumption
*** pparam = 20; no O2 consumption; very stable 
** plotting.py: v0.12 - added function for plotting example traces from single run
** SpatialModelRealistic.py: v0.47c - added interval saving every 5 seconds

* [2021-7-9 Fri] - o2 consumption vs replenishment 
** adam models edema/ischemia in Newton2018-cj by changing volume fraction and 
tortuosity in the core rather than the whole tissue 
*** may want to also spatially distribute O2 consumption 
*** SpatialModelRealistic.py: v0.48 - allow for ischemic core where O2 is reduced 
and not replenished and ECS propertied are altered
** plotting combo sims
*** plotting.py: v0.13 - combining recordings from different/continued runs, testing with example traces func

* [2021-7-11 Sun] - more cores and o2 consumption 
** SpatialModelRealistic.py: v0.48b - allow for core with reduced O2 but replenished in addition to previous configuration

* [2021-7-12 Mon] - o2 consumption, stability, SD, etc
** no SD with no O2 consumption for single bolus of K+ 
*** [[Data/noO2consum_pparam20_r040_10s/K_wave_position.png][wave only makes it 11 um past core]]

* [2021-7-13 Tue] - future directions and SFN abstract 
** Possible directions 
*** Ischemic core sims 
**** different core sizes  
**** different surface area to volume ratios 
***** currently using 3 (typical value for cortical pyramidal cells)
***** figure should at least show 0.02 value, which would be case if not using
fractional volumes, but keeping neuronal volume fraction of 0.24 (Rice1998-ll)
***** could do a range [0.02, 1.0, 2.0, 3.0, 4.0] as in previous fig 
**** no O2 replenishment in core vs. reduced [O2] but replenished 
**** different cell densities  
**** elevated [K+] in core vs. spontaneous SD initiation w/ no elevated [K+]
***** stab in the dark - could no elevated [K+] be case for anoxia/ischemia and 
elevated [K+] could be case for TBI where there's cell damage. 
***** could also look at time to SD initiation for various parameters listed above
**** edema (altered ECS) w/ no ischemia/anoxia (i.e. no decreased [O2] and O2 gets replenished)
**** scaling up/down glial Na/K pump activity (considering less glial buffering in V1)
**** multiple ischemic cores 
*** Normoxic sims 
**** try increasing initial [K+] in core to find threshold 
***** similarly increasing core size 
**** in the event I can't find a threshold for normoxic...
***** maybe total pump failure in core?
***** may point to necessity for dynamic ECS properties in normoxic condition 
seen in Mazel2002-zm 
*** As commentary on extending Wei et al from single cell to tissue scale 
**** O2 needs to be replenished for stability 
**** the volume dynamics defined by Wei et al (which currently don't affect ECS 
volume fraction and tortuosity) negligible 
**** again with difficulty of initiating SD 

** could consider no O2 replenishment as in vitro and no O2 consumption as in vivo,
but there is the issue of spontaneous depolarization 

* [2021-7-15 Thu] - sfn abstract, more sims 
** sfn 2021 abstract on sd
*** [[https://docs.google.com/document/d/1JUQ_AI_DzRQA6YhQfpjlYOuflhcagLNJu4GGpkCkwBI/edit?usp=sharing][SFN abstract]]

* [2021-7-16 Fri] - combining results from fragmented runs 
** nice results for ischemic core with no O2 comsumption, k0=40, but is this really 
a biologically relevant configurations?
** SpatialModelRealistic.py: v0.48c - interval saving of membrane potential files as well
** plotting.py: v0.13b - combining fragmented runs for rasters and membrane potential files 

* [2021-7-19 Mon] - more sims  
** overview of sims 
*** continuation of anox, no elevated K+, ischem core to 20s, went well 
*** similar situation, bigger core still running on downstate hpc bigmem 

* [2021-7-20 Tue] 
** Topics for today's meeting
*** How to represent edema? ~3s sim time / day, so really want to have plan 
**** Core Size
***** Currently using core with radius 100+ um, in penumbra VF and tortuosity 
increase linearly from anox value to normox value as in Newton2018-cj
***** Rao2019-pu says core sizes after stroke are <70mL, penumbra >15mL, initial 
infarct >1.8mL  
**** Core O2 
***** Currently using O2=0.01 mM in core (based on Hoffman1996-dv), 0.04 mM outside (based on Lyons2016-fe)
***** Should it be O2=0.01 everywhere? Or increase linearly in penumbra as VF and
tortuosity?
***** Does it make sense to have edema without ischemia?
**** Cell volume and surface area 
***** Currently not changing cell volume or neuronal volume fraction, just changes
to O2 and ECS properties.
***** Took PT cell from M1, increased diameters by 25%, S:V decreased by 15%
2.67 -> 2.27 
*****  Olsson2006-qw "increases correspond to 7% and 10% increases in cell volume"
***** Zhou2010-dr "at SD onset, a rapid increase in neuronal volume was initiated, reaching 
a maximum (11.0 ± 0.9%, P < 0.001) in 72 ± 3s(n = 10), followed by gradual 
recovery to baseline in 5--7 min"
***** interesting but not too important: Andrew2007-oc "these same neurons then 
swell dramatically upon oxygen/glucose deprivation or [K1]0 elevation, so prolonged 
depolarization (as during stroke or seizure) apparently swells neurons by opening
nonaquaporin channels to water."
*** In vivo vs. in vitro 
**** Currently considering in vitro when O2 only diffuses in from margins, wheras
in vivo O2 both diffuses in from margins and is replenished throughout the tissue 
**** Still have issue of spontaneous depolarization, even in normox, for in vitro
condition, but this seems to be a function of tissue size.  Could pick a size and
only consider linear-ish regime of SD wave spread, since the spontaneous depol
and jump in wave position seems to depend on the size of the tissue . . . so is 
wave speed though too 
**** Right now, see SD in normox and anox conditions in vitro, and with edema in
vivo. Wasn't able to elicit SD in vivo normoxic, but haven't jacked up initial K+
yet. Got spontaneous and elicited SD in ischemic edema condition outlined above 
**** If can't get SD in vivo normoxic, try pump failure?  If so, should those 
failed pumps be relegated to a core?
*** Parameters worth exploring
**** S:V 
**** Core size (edema, K+, and/or O2 availability)
**** Cell density
**** Multiple cores - opens up whole landscape of parameters . . . bit of a mess
perhaps 
*** iCSD abstract - due 7/25
**** Can probably ditch some of the background  
**** Any suggestions on how to distinguish from SFN abstract?
** o2 convo on slack:
billl  4:35 PM
yoo` explainted to me last week what the jumps are i think??  -- please remind

Craig  4:40 PM
the jumps are from the remaining cells (beyond 300um from the center) depolarizing 
more or less at once.  This happens later (4-8 s) if there isn't any elevated K+. 
The only way I could get it to a steady state without this spontaneous depol was 
to eliminate O2 conumption (or more biologically, replenish O2 at the rate it is 
consumed), but this sounds much more like the case in vivo w/ vasculature than in 
vitro
4:42
guessing that the depol is prevented in the real life in vitro condition because 
there's still some inhibition, but we have no connectivity at all
billl  4:43 PM
is it a feature or a bug (the jump) ?
4:43
why 300um?
4:43
the cells are not connected right?
Craig  4:45 PM
i think more bug.  300 um is a function of the S:V and cell density and so on  
(in the one above it gets farther and farther away as S:V increases).  
the cells aren't connected
billl  4:45 PM
why func of S:V ?
Craig  4:45 PM
and when the model/ecs is bigger, there are more cells unaffected by the SD that 
can help suck up K+
billl  4:45 PM
how does the jump happen -- action at a distance?  gravity?  strong or weak force??
4:46
it's interesting ; anomalies are intersting -- doesn't seem to be a code bug but 
could be a conceptual bug
Craig  4:46 PM
K+ accumulates in the ECS, more K+ in ECS means more O2 consumed, more O2 consumed
means less Na/K pump activity, less pump activity means more accumnulation, 
positive feedback loop (edited) 
billl  4:47 PM
has anything like this been reported in anyone's figs?  leao?
4:47
often the discoverer is the most honest since doesn'thave to coform to expectations
4:47
what you're saying there sounds like the genesis of the wave?  but what's diff about
the jump?
Craig  4:47 PM
i don't think so, not that i've seen anyway, but no one really seems to be 
measuring wave position with this kind of resolution
billl  4:48 PM
true
Craig  4:48 PM
and i think leao was working  in vivo
billl  4:48 PM
well we make a prediction that high res will show a jump?  if we can explain it ;
yes leao was inviv i think youre right
Craig  4:49 PM
what's different with the jumps is that it doesn't spread outward, instead it's 
roughly all at once
4:49
whereas, in the "edema" sims I've done, you get the spontaneous depol in the core 
and that spreads outward
4:53
the jump during SD and the tissue-wide simultaneous and spontaneous depol are 
(at least in my mind) related, especially since the latter doesn't occur when 
O2 is replenished and I'd figure the whole slice doesn't spontaneously 
depolarize in real life, so i wouldn't predict the jump either

billl  4:54 PM
"it's roughly all at once" -- that defines the jump
4:54
so the reason has to do with the way we're handling O2 in the slice -- it depletes 
everywhere at once?  at that time when we get to ~300?  why at that time?  what 
time is that?  why all at once?
Craig  5:01 PM
I don't have these numbers handy, but actually "everywhere at once" is with no 
elevated K+, that occurs around 8s in the normox condition; 4s in the anoxic 
condition.  The jump from ~300um - ~1200um occurs at ~2s when S:V is 3.0 and 
elevated K+ is 30mM (haven't looked at different initial K+ values, but suspect 
this will also influence the timing of the jump).  Happens roughly simultaneously 
because the rate of O2 consumption is and the initial O2 concentration is constant 
everywhere.  There might be some cells right at the margins that have sufficient 
O2 to keep the pumps going, but I haven't checked that. (edited) 
billl  5:05 PM
so the depol cells don't use O2 faster?
5:05
sounds like don't have homeostasis if run out of O2 in normox condition with 
nothing going on
Craig  5:07 PM
so pump activity isn't a function of voltage, but as K+ accumulates, pump activity 
and O2 consumption increase, but by the time the cell spikes, there's no O2 left.
5:08
and yeah, we don't.  For a couple seconds things remain fairly stable, but after 
some time things blow up
5:09
things remain steady when O2 doesn't get consumed
5:11
which I thought would be more in vivo , but actually you might recall Sabina 
saying that O2 diffuses into the slice very fast, (right now its diffusion 
constant is 1, but idk how accurate that is) so maybe that's not so unrealistic, 
but we then come up against the issue I had with the "in vivo" sims where I 
couldn't elicit SD with 40 mM K+
Craig  5:20 PM
i'm going to start making my way home,  but will check this later for additional 
questions/comments
billl  5:28 PM
1; compared to eg K is ??
adamnewton  5:28 PM
1um**2/ms is a bit slow, probably should be ~3um**2/ms. Did 40mM cause 
depolarization in the center without SD?
5:30
I think we have 2.62um**2/ms for K
billl  5:32 PM
i thought a gas -- eg O2 would be order of mag faster than an ion?
adamnewton  5:51 PM
Yeah, that's the value for oxygen diffusion in water, maybe the tortuosity would 
be lower for a gas
billl  6:22 PM
one trick about gases is that they pass thru membranes so no volume frac and no 
tortuosity i would think?
adamnewton  6:25 PM
Yeah, we'd need to create a second rxd.Extracellular region for that.
Craig  6:36 PM
Didn’t occur to me you could do the second ecs region, but that makes sense. 
Volume fraction would be 1 though, right?
billl  6:46 PM
1 means ECSvol/total vol right? so yes
6:47
so the value in water is 3?  so even though uncharaged not much faster than K+?  
seems like uncharged would be big advantage in mobility?
6:47
not carrying around a massive hydration sheell
Craig  6:48 PM
i found 2.01 for O2 in water, but adam's right K+ = 2.62 in our sim (edited) 
billl  6:49 PM
where did 2.62 come from?
Craig  6:50 PM
don't know
billl  6:55 PM
some paper or even textbook with tables of D values?  -- ask sabina?
Craig  6:57 PM
yeah, will look (found 1.96 in on a website, but not a legit ref), but I'm 
guessing adam had some rationale considering 3 significant figures
Craig  6:59 PM
also, to answer adam's question about K+=40mM in the core with normox conds and 
when O2 isn't consumed - yes, the cells in the core do depolarize (spike then stay 
around -30mV), but that doesn't move much out of the core (e.g. 30um from edge of 
the core, one cell only depolarizes ~10mV) (edited) 
3 replies
Last reply today at 7:56 PMView thread
Craig  1 hour ago
also, to answer adam's question about K+=40mM in the core with normox conds and 
when O2 isn't consumed - yes, the cells in the core do depolarize (spike then 
stay around -30mV), but that doesn't move much out of the core (e.g. 30um from 
edge of the core, one cell only depolarizes ~10mV) (edited) 
adamnewton  39 minutes ago
Is the problem that the concentration drops too quickly due to diffusion or are 
the pumps too effective at clearing it?
As we're simulating something pathological shouldn't the pumps in the core be 
overwhelmed?
Craig  30 minutes ago
the latter - without depleting O2, the pumps outside the core clear K+ too quickly 
(edited) 
Craig  26 minutes ago
but if they do consume O2, they depolarize even in the absence of elevated K+ 
after awhile (edited) 
billl  6:59 PM
well seems something is amiss if have similar values for O2 and K+  ; perhaps 
need to make sure getting all from a similar source and expt setup
adamnewton  7:01 PM
You might need to scale for the temperature
Craig  7:01 PM
ah ok. also imagine that having the volume fraction of 1 for O2 will make a big 
difference
adamnewton  7:05 PM
This was the source for the potassium diffusion coefficient; 
https://paperpile.com/app/p/e5b72746-6145-097f-a6dc-5d871b40e9e9
Craig  7:07 PM
thanks
adamnewton  7:25 PM
Actually, both oxygen and the ions and are in the CRC handbook of chemistry and 
physics;
** Adressing O2 concerns 
*** SpatialModelRealistic: v0.49 - separate ecs for o2 reflecting its a gas 

* [2021-7-21 Wed] - o2 and stability revisited 
** using the new setup for O2, spontaneous SD when no elevated K+,
no SD when K0=40 . . . WTF?

* [2021-7-22 Thu]  - o2 and stability cont 
** did get change in v / SD when k0=70 for normox conds and new O2 setup 
** SpatialModelRealistic.py: v0.49b - still working on spontaneous depol issue, kcc2 was being overwritten, trying first version
** SpatialModelRealistic.py: v0.49c - back to original kcc2 and inserted pas

* [2021-7-23 Fri] - passive mechanisms make steady states 
** SpatialModelRealistic.py: v0.49d - make sure inufuse is just true, not necessarily yes
** sims with passive mechanism - inserted pas to cells 
*** e_pas = -90 mV: Vmemb drops way too low 
*** e_pas = -78, v_initial = -78: Vmemb reaches steady state, but O2 drops to 0
almost instantaneously 
*** e_pas = -78, v_initial = -78, pparam = 25: Vmemb reaches steady state in most
cells, but seems that for at least one cell near center of the core Vmemb depols 
and reaches a second "steady state" 
*** ibid, k0 = 70 mM: initial depol but Vmemb returns to steady state 

* [2021-7-24 Sat] - still no SD with e_pas = -70 
** SpatialModelRealistic.py: v0.49e - user specifies gpas 
*** maybe should decrease gpas, trying by order of magnitude 
*** e_pas = -70, g_pas = 0.0001, normox, no elevated K - no depol, cells reach 
steady state, but each cell reaches a different one 
*** e_pas = -70, g_pas = 0.0001, anox, k0=70 - SD / "wave of death" (single spike)

* [2021-7-25 Sun] - g_pas = 0.0001 allows for SD 
** specifics on pas and o2 consumption 
*** e_pas = -70, g_pas = 0.0001, pparam=20, normox - O2 still drops really fast
at most spots, Vmemb not terribly steady but at least no depol 
*** e_pas = -70, g_pas = 0.0001, pparam=20, k0=70, anox - ~3 mm/min wave speed
** more sims
*** e_pas = -70, g_pas = 0.0001, pparam=25, normox, noelk - running on zn 
**** not quite steady, but no depol, O2 depletes at much more reasonable looking rate 
*** e_pas = -70, g_pas = 0.0001, pparam=20, anox, k0=70, big - running on bigmem 
*** e_pas = -70, g_pas = 0.0001, pparam=20, normox, k0=70 - running on my 
**** shows SD - very nice
*** e_pas = -70, g_pas = 0.0001, pparam=25, anox, k0=70 - running on my 
**** also gets SD ~3.3 mm/min 
*** e_pas = -70, g_pas = 0.0001, pparam=20, normox, k0=70, big - running on zn 

* [2021-7-26 Mon] - o2 D calculation 
** scaling D for O2 at 37C from CRC handbook (was using 3 in new setup w/ second ecs)
d = [1.67, 2.01, 2.42]                                                                       
t = [15, 20, 25] 
m, b = np.polyfit(t,d,1)  
*m*37 + b = 3.3*

* [2021-7-27 Tue] - going forward with current setup 
** sim results 
*** e_pas = -70, g_pas = 0.0001, pparam=25, anox, k0=40
**** SD at ~1.8 mm/min 
*** e_pas = -70, g_pas = 0.0001, pparam=20, anox, k0=70, big 
**** NO SD, maybe need bigger core with bigger tissue 
** meeting notes 
*** Where we are at now: no more spontaneous depolarization, something resembling
RMP, can tweak pumps to get gradual O2 consumption with no elevated K+, and can 
get SD with elevated K+
**** move forward with sims for paper / poster from here? 
**** or keep working at steadier state when with no elevated K+? - don't think 
there's going to be a figure dedicated to the system at rest 
*** one possible issue with the current picture - size matters
**** can't get SD in bigger sims with all else held constant
**** maybe feature rather than bug, trying increasing radius of core to 300 um
** look at slice thickness 
*** SpatialModelRealistic.py: v0.49f - user specifies Lz 

* [2021-7-28 Wed] - fishing for results 
** sim results 
*** e_pas = -70, g_pas = 0.0001, pparam=20, s:v=3.5, anox, k0=60, r0=300, big 
**** SD at 3 mm/min 
*** e_pas = -70, g_pas = 0.0001, pparam=20, s:v=3.0, anox, k0=70, r0=100, 1 mm, Lz=200
**** SD at 3.6 mm/min - clear size dependence
** sims to run 
*** S:V 
**** hippocampal pyramidal cells from Ascoli 
***** 4.05 http://neuromorpho.org/neuron_info.jsp?neuron_name=n15fts 
***** 3.99 http://neuromorpho.org/neuron_info.jsp?neuron_name=n27fts 
**** cortical pyramidal cells from Shepherd & Suter 
***** 3.17 http://neuromorpho.org/neuron_info.jsp?neuron_name=BS0482
***** 3.78 http://neuromorpho.org/neuron_info.jsp?neuron_name=BS0613 
**** human cortical pyramidal from Allen Brain Atlas 
***** 5.89 http://neuromorpho.org/neuron_info.jsp?neuron_name=H16-03-002-01-06-01_549379618_m
***** 8.07 http://neuromorpho.org/neuron_info.jsp?neuron_name=H16-06-004-01-04-01_538906745_m
***** 6.52 http://neuromorpho.org/neuron_info.jsp?neuron_name=H17-03-002-11-04-02_596792557_m
**** start with [0.02, 1.0, 2.0, 3.0, 4.0] using 1mm, anoxic, ... 
***** 0.2 and 1.0 running on *downstate hpc Normal partition*
***** 2.0 running on *downstate hpc BigMem partition DONE*
***** 3.0 *DONE*  
***** 4.0 running on *zn DONE*
***** 5.0, 6.0 *downstate hpc Normal*
*** slice thickness 
**** start with [100, 200 *DONE*, 300 *running on zn*, 400 *running on my*]
*** cell density 
**** start with [45k, 67.5k *running on BigMem DONE*, 90k *DONE*]
*** anox vs. normox 
**** start with e_pas = -70, g_pas = 0.0001, pparam=20, s:v=3.0, k0=70, r0=100, 1 mm, Lz=200
***** normox running on *my DONE* 
***** anox *DONE*
** code improvements 
*** compute raster from recs.pkl rather than membrane_potential.pkl (or both)
**** plotting.py: v0.14 - getRaster() combines recks.pkl and membrane_potential.pkl files 
*** automate computing wave speed from either K wave position graph or raster 
**** plotting.py: v0.15 - compute wave speeds for spike wave and K+ wave 

* [2021-7-29 Thu] - starting to put figures together 
** Figure code 
*** compare K+ waves for normox and anoxic 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/normox_k070_r0100_1mm_20s/', 'Data/anox_k070_r0100_1mm_20s/']
speeds = getKwaveSpeed(datadirs, r0=100, rmax=600)
labels = ['Normoxic: %.1f mm/min' % (speeds[0]), 'Anoxic: %.1f mm/min' % (speeds[1])]
legendTitle = r'K$^+$ Wave Speed'
compareKwaves(datadirs, labels, legendTitle)
*** composite vmemb/spikes/K+ position heat maps 
from plotting import vmembSpkFreqSbPlts
rmax = 680
poolsize = 14 
noverlap = 20
sbplts = [121, 122]
tend = 20
datadir = 'Data/anox_k070_r0100_1mm_20s/'
vmembSpkFreqSbPlts(datadir, 20, spatialbin=50, tempBin=50, tend=tend, sbplts=sbplts, noverlap=noverlap, poolsize=poolsize, rmax=rmax)
*** compare different S:V 
from plotting import compareKwaves, getKwaveSpeed
datadirs = [ 'Data/anox_k070_r0100_1mm_sa2v02_10s/', 'Data/anox_k070_r0100_1mm_sa2v2p5_10s/', 
            'Data/anox_k070_r0100_1mm_20s/', 'Data/anox_k070_r0100_1mm_sa2v3p5_10s_v2/', 
            'Data/anox_k070_r0100_1mm_sa2v4_20s/', 'Data/anox_k070_r0100_1mm_sa2v4p5_10s/', 
            'Data/anox_k070_r0100_1mm_sa2v5_10s/',
            'Data/anox_k070_r0100_1mm_sa2v6_10s/']
speeds = getKwaveSpeed(datadirs, r0=100, rmax=600)
# labels = [r'2.5 $\mu$m$^{-1}$: %.1f mm/min' % (speeds[0]), 
#           r'3 $\mu$m$^{-1}$: %.1f mm/min' % (speeds[1]), r'3.5 $\mu$m$^{-1}$: %.1f mm/min' % (speeds[2]), 
#           r'4 $\mu$m$^{-1}$: %.1f mm/min' % (speeds[3]), r'4.5 $\mu$m$^{-1}$: %.1f mm/min' % (speeds[4]), 
#           r'5 $\mu$m$^{-1}$: %.1f mm/min' % (speeds[5])]
labels = [r'0.02 $\mu$m$^{-1}$', r'2.5 $\mu$m$^{-1}$', r'3.0 $\mu$m$^{-1}$', r'3.5 $\mu$m$^{-1}$',
          r'4.0 $\mu$m$^{-1}$', r'4.5 $\mu$m$^{-1}$', r'5.0 $\mu$m$^{-1}$',
          r'6.0 $\mu$m$^{-1}$']
ratios = [0.02, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0]
legendTitle = 'S:V'
compareKwaves(datadirs, labels, legendTitle, sbplt=121)
from matplotlib import pyplot as plt 
plt.subplot(122)
plt.plot(ratios, speeds, '*-')
plt.xlabel(r'S:V ($\mu$m$^{-2}$)', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(121)
plt.xlim(0,10)

** SpatialModelRealistic.py: v0.50 - abandoned interval saving, recs_#.pkl files were corrupted
** Neuronal Complexity Is Attenuated in Preclinical Models of Migraine and Restored by 
HDAC6 Inhibition.” eLife 10 (April). https://doi.org/10.7554/eLife.63076. Bertels2021-in
*** really high S:V - (~16, even in brainstem)

* [2021-7-30 Fri] - issues with plotting heat maps - uneven sampling across depth
** sim results 
*** no SD for anox k070 r0100 s:v=3.0 cell density = 67.5
*** no SD for anox k070 r0100 s:v=5.0, 6.0 
*** jumps in membrane potential over space (especiall in normox)
**** convo with bill 
Bill - maybe make the x axis space instead of time would be easier to see
12 replies
Craig  5 minutes ago
you mean for the heat maps?
billl  5 minutes ago
line maps
billl  5 minutes ago
for individual cells
billl  5 minutes ago
no not for individual cells
billl  5 minutes ago
across cells now
Craig  3 minutes ago
i don't think i can picture that
Craig  3 minutes ago
talking about a 3D representation?
billl  3 minutes ago
i can't either but if you build it they will come
billl  3 minutes ago
was thinking about something like the splaceplot in neuron
billl  2 minutes ago
2d -- lines are across neurons -- average perhaps or just single 
taken at each localtion -- that's xax; yax is same as you have now
billl  2 minutes ago
different times are diff colors
Craig  2 minutes ago
oh, ok, think i follow you
**** code for bill's suggestion - edge/depth effect
import pickle 
import numpy as np
from matplotlib import pyplot as plt 
datadir = 'Data/normox_k070_r0100_1mm_20s/'
filename = 'recs.pkl'
with open(datadir+filename, 'rb') as fileObj:
  data = pickle.load(fileObj)
iss = [i for i, pos in enumerate(data['pos']) if 180 < (pos[0]**2+pos[1]**2+pos[2]**2)**0.5 < 320]
rs = [(pos[0]**2+pos[1]**2+pos[2]**2)**0.5 for pos in data['pos'] if 180 < (pos[0]**2+pos[1]**2+pos[2]**2)**0.5 < 320]
times = np.linspace(0, 10000, 20)
cs = plt.cm.jet([i/20 for i in range(20)])
plts = [[] for i in range(len(times))]
for j, t in enumerate(times):
  for i in iss:
    tind = np.argmin(np.square(np.subtract(data['t'], t)))
    plts[j].append(data['v'][i][tind])
for spcplt, t, c in zip(plts, times, cs):
  l = 't = %.1f s' % (t/1000)
  plt.plot(rs, spcplt, '*-', label=l, color=c)
plt.ylabel(r'V$_{memb}$ (mV)', fontsize=16)
plt.xlabel(r'Distance ($\mu$m)', fontsize=16)
plt.legend()
*** S:V sweet spot
**** convo with adam 
adamnewton  1:53 PM
That's interesting, I wonder if with greater surface area the pumps are able to 
remove the initial Ko, or with less volume, depolarization doesn't provide enough 
K+ to sustain the wave. When you change the S:V ratio, do you reduce the volume 
while keeping the same surface area? (edited) 
Craig  2:00 PM
I'm changing the surface are while keeping the neuronal volume the same 
(to maintain a neuronal volume fraction of 0.24) (edited) 
2:00
so I think it's the former

* [2021-8-2 Mon] - more plotting 
** plotting slice depth 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/anox_k070_r0100_1mm_Lz100_12s/', 'Data/anox_k070_r0100_1mm_20s/', 
            'Data/anox_k070_r0100_1mm_300um_20s/', 'Data/anox_k070_r0100_1mm_400um_20s/', 
            'Data/anox_k070_r0100_1mm_Lz500_12s/', 'Data/anox_k070_r0100_1mm_600um_12s/',
            'Data/anox_k070_r0100_1mm_Lz700_12s/', 'Data/anox_k070_r0100_1mm_Lz800_12s/']
speeds = getKwaveSpeed(datadirs, r0=100)
labels = [r'100 $\mu$m', r'200 $\mu$m', r'300 $\mu$m', r'400 $\mu$m', r'500 $\mu$m']
thick = [100, 200, 300, 400, 500, 600, 700, 800]
legendTitle = 'Slice Thickness' 
compareKwaves(datadirs, labels, legendTitle, sbplt=121)
from matplotlib import pyplot as plt 
plt.subplot(122)
plt.plot(thick, speeds, '*-')
plt.xlabel(r'Slice Thickness ($\mu$m$^{-2}$)', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(121)
plt.xlim(0,12)
* [2021-8-3 Tue] - issue running sims on downstate hp 
** no SD in 3.5 and 4.5 S:V conds - definitely a bug 

* [2021-8-4 Wed] - fixed yesterday's issue 
** issue from yesterday fixed by updating neuron-nightly 

* [2021-8-5 Thu] - running sims on downstate hpc 
** lz = 100, 500; sa2v = 2.0, 0.02; Dneurons = 67.5k
*** message scott about failing nodes 

* [2021-8-6 Fri] - running sims for parameter figs 
** code for comparing K wave for different densities 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/anox_k070_r0100_1mm_d45_10s/', 'Data/anox_k070_r0100_1mm_d67_10s/', 'Data/anox_k070_r0100_1mm_20s/', 'Data/anox_k070_r0100_1mm_d112p5_10s/']
speeds = getKwaveSpeed(datadirs, r0=100)
labels = ['45k', '67.5k', '90k', '112.5k']
densities = [45, 67.5, 90, 112.5]
legendTitle = r'Neuron Density (cells/mm$^3$)'
compareKwaves(datadirs, labels, legendTitle, sbplt=121)
from matplotlib import pyplot as plt 
plt.subplot(122)
plt.plot(densities, speeds, '*-')
plt.xlabel(r'Neuron Density (x 1000 cells/mm$^3$)', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(121)
plt.xlim(0,10)
** plotting.py: v0.16 - enable subplots for compareKwaves()
** cell densities: Keller2018-ql "Estimates of neuronal density range from 
48,000 cells/mm3 in orbital cortex to 155,000 cells/mm3in visual cortex"
** running sims: lz = 500, 100; Dneurons = 45k, 112.5k; S:V = 0.02 (on my)

* [2021-8-7 Sat] - running more sims 
** anox k0=40,20,10; Lz=700 on downstate hpc

* [2021-8-8 Sun] - ibid 
** yesterday was actually normox, running anox on downstate hpc 
** compare normox k0 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/normox_k020_r0010_1mm_10s/', 'Data/normox_k040_r0010_1mm_10s/', 'Data/normox_k070_r0100_1mm_20s/']
speeds = getKwaveSpeed(datadirs, r0=100)
labels = ['20 mM', '40 mM', '70 mM']
densities = [20, 40, 70]
legendTitle = r'[K$_{ecs}$]$_0$'
compareKwaves(datadirs, labels, legendTitle, sbplt=121)
from matplotlib import pyplot as plt 
plt.subplot(122)
plt.plot(densities, speeds, '*-')
plt.xlabel(r'Initial [K$_{ecs}$] (mM))', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(121)
plt.xlim(0,10)

* [2021-8-9 Mon] - interesting results for k0 in anoxic condition 
** compare anox k0 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/anox_k010_r0100_1mm_10s/', 'Data/anox_k020_r0100_1mm_10s/', 'Data/anox_k040_r0100_1mm_10s/', 'Data/normox_k070_r0100_1mm_20s/']
speeds = getKwaveSpeed(datadirs, r0=100)
labels = ['10 mM', '20 mM', '40 mM', '70 mM']
densities = [10, 20, 40, 70]
legendTitle = r'[K$_{ecs}$]$_0$'
compareKwaves(datadirs, labels, legendTitle, sbplt=121)
from matplotlib import pyplot as plt 
plt.subplot(122)
plt.plot(densities, speeds, '*-')
plt.xlabel(r'Initial [K$_{ecs}$] (mM))', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(121)
plt.xlim(0,10)
** interesting results with anoxic and diff k0 
*** wave speed is greater for k0=40 than k0=70 
** there is spontaneous depol in anoxic cond after >9s, and this is 
evident for very low initial K+, but it is not evident for high initial 
K+. SD seems to mask, or prevent the spontaneous depol. might even be 
interpreted as supporting the hypothesis that "that higher brain ‘shutdown’ has 
evolutionary advantages." Andrew2016-sx

* [2021-8-10 Tue] - digging into anoxic k0 result 
** plotting.py: v0.18 - enable fragmented sims for compareKwaves()
** plot k020 and noelk 
from plotting import compareKwaves
datadirs = ['Data/anox_noelk_1mm_10s/', ['Data/anox_k020_r0100_1mm_10s/', 'Data/anox_k020_r0100_1mm_10-15s/']]
labels = ['3.5 mM', '20 mM']
legendTitle = r'[K$_{ecs}$]$_0$'
compareKwaves(datadirs, labels, legendTitle)

** meeting notes:
*** (copied from [2021-8-9 Mon]) there is spontaneous depol in anoxic cond after
>9s, and this is evident for very low initial K+, but it is not evident for
high initial  K+. SD seems to mask, or prevent the spontaneous depol. might even 
be interpreted as supporting the hypothesis that "that higher brain ‘shutdown’ has 
evolutionary advantages." Andrew2016-sx
*** SD meeting a location, altenative: reached a threshold where everything goes off
not complete because of edge effects

* [2021-8-11 Wed] - moving on with running sims 
** interesting result actually was actually a bug 
** plotting.py: v0.16b - enable fragmented sims for species diffusion gifs
** running sims 
*** running k0=50,60 mM normoxic on downstate hpc 
*** running anox, no elevated K+, 10-15s on downstate hpc
*** running k0=70 with recorded neurons at same depth on zn
** SpatialModelRealistic.py: v0.51 - placing rec_neurons at the same depth (z=0)

* [2021-8-12 Thu] - depth related differences in SD 
** working out heat map issues 
*** plotting.py: v0.17 - replace nans with 0 in spike freq heatmap
*** plotting.py: v0.17b - specification of max for spk freq heatmap and switch to perceptually uniform cmap
*** plotting.py: v0.17c - ditch linear fit for wave position / speed computation
** bill thinks depth differences are key 
*** SpatialModelRealistic.py: v0.51b - two sets of rec neurons, one at center another near the margin
*** plotting.py: v0.17d - user can specify whether to plot cells in center of periphery of slice
*** running 20s long sims (anox and normox, Lz=400) on downstate hpc with recorded neurons at the center and periphery 

* [2021-8-13 Fri] - trying in vivo sims 
** shouldn't be depth related issues, so recording uniformly
*** SpatialModelRealistic.py: v0.51c - toggle between uniform recordings and at specific depths
** sims running 
*** normox, in vivo, 5s, 1mm3 on downstat bigmem 
*** anox, r0=50,150, 10s on downstate normal 

* [2021-8-14 Sat] - in vivo, center vs. periph, r0 
** plotting wave speed for different r0 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/anox_k070_r050_1mm_10s/', 'Data/anox_k070_r0100_1mm_20s/', 'Data/anox_k070_r0150_1mm_10s/']
speeds = getKwaveSpeed(datadirs, r0=100)
labels = ['50 $\mu$m', '100 $\mu$m', '150 $\mu$m']
radii = [50, 100, 150]
legendTitle = 'Core Radius'
compareKwaves(datadirs, labels, legendTitle, sbplt=121)
from matplotlib import pyplot as plt 
plt.subplot(122)
plt.plot(radii, speeds, '*-')
plt.xlabel(r'Core Radius (mM))', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(121)
plt.xlim(0,10)
** center vs periphery:
*** SpatialModelRealistic.py: v0.51d - centermembrane needs to be reflected for raster plotting
*** plotting.py: v0.17.4 - user specifies center or periphery for combo vmemb and spike heatmap
*** plotting.py: v0.17.5 - raster needs to differentiate between uniformly distributed recs and single layer
** in vivo sims
*** getting VERY SLOW SD in normox with k0=70
**** keep as is or use infuse? 
*** running 5s of anoxic on downstate bigmem

* [2021-8-17 Tue] - repeating param explore for normox 
** running sims 
*** s:v = 4, 5, 6 (2 pending) on downstate normal  
*** D = 112.5k on downstate bigmem 
*** D = 67.6k on zn 

* [2021-8-18 Wed] 
** plotting normox and anox s:v 
from plotting import compareKwaves, getKwaveSpeed
datadirs = ['Data/anox_k070_r0100_1mm_sa2v02_10s/', 
            'Data/anox_k070_r0100_1mm_sa2v1_10s/',
            'Data/anox_k070_r0100_1mm_sa2v2_20s/',  
            'Data/anox_k070_r0100_1mm_20s/',
            'Data/anox_k070_r0100_1mm_sa2v4_20s/', 
            'Data/anox_k070_r0100_1mm_sa2v5_10s/',
            'Data/anox_k070_r0100_1mm_sa2v6_10s/']
# datadirs = [ 'Data/anox_k070_r0100_1mm_sa2v1_10s/', 'Data/anox_k070_r0100_1mm_sa2v2p5_10s/', 
#             'Data/anox_k070_r0100_1mm_20s/', 'Data/anox_k070_r0100_1mm_sa2v3p5_10s_v2/', 
#             'Data/anox_k070_r0100_1mm_sa2v4_20s/', 'Data/anox_k070_r0100_1mm_sa2v4p5_10s/', 
#             'Data/anox_k070_r0100_1mm_sa2v5_10s/',
#             'Data/anox_k070_r0100_1mm_sa2v6_10s/']
speeds_anox = getKwaveSpeed(datadirs, r0=100, rmax=600)
speeds_anox[0] = 0
speeds_anox[2] = 0
labels_anox = [r'0.02 $\mu$m$^{-1}$', r'1.0 $\mu$m$^{-1}$', r'2.0 $\mu$m$^{-1}$', r'3.0 $\mu$m$^{-1}$',
          r'4.0 $\mu$m$^{-1}$', r'5.0 $\mu$m$^{-1}$',  r'6.0 $\mu$m$^{-1}$']
ratios_anox = [0.02, 1, 2, 3, 4, 5, 6]
# ratios_anox = [0.02, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0]
legendTitle = 'S:V'
compareKwaves(datadirs, labels_anox, legendTitle, sbplt=132)
datadirs = ['Data/normox_k070_r0100_1mm_sa2v02_10s/', 'Data/normox_k070_r0100_1mm_sa2v1_10s/', 
            'Data/normox_k070_r0100_1mm_sa2v2_10s/', 
            'Data/normox_k070_r0100_1mm_20s/', 'Data/normox_k070_r0100_1mm_sa2v4_10s/',
            'Data/normox_k070_r0100_1mm_sa2v5_10s/', 'Data/normox_k070_r0100_1mm_sa2v6_10s/']
ratios_normox = ratios_anox
labels_normox = [r'0.02 $\mu$m$^{-1}$', r'1.0 $\mu$m$^{-1}$', r'2.0 $\mu$m$^{-1}$', 
                r'3.0 $\mu$m$^{-1}$', r'4.0 $\mu$m$^{-1}$', r'5.0 $\mu$m$^{-1}$',
                r'6.0 $\mu$m$^{-1}$']
speeds_normox = getKwaveSpeed(datadirs, r0=100, rmax=600)
speeds_normox[0] = 0
speeds_normox[1] = 0
compareKwaves(datadirs, labels_normox, legendTitle, sbplt=131)
from matplotlib import pyplot as plt 
plt.subplot(133)
plt.plot(ratios_normox, speeds_normox, '*-', label='Perfused')
plt.plot(ratios_anox, speeds_anox, '*-', label='Hypoxic')
legend = plt.legend(title='Tissue Oxygenation', fontsize=12)
plt.setp(legend.get_title(), fontsize=14)
plt.xlabel(r'S:V ($\mu$m$^{-1}$)', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(131)
plt.xlim(0,10)
plt.ylim(-10,650)
plt.title('Perfused', fontsize=18)
plt.subplot(132)
plt.xlim(0,10)
plt.ylim(-10,650)
plt.title('Hypoxic', fontsize=18)
plt.subplot(133)
plt.title('SD Wave Speed', fontsize=18)
fig = plt.gca()
fig.figure.set_figheight(7.6)
fig.figure.set_figwidth(14)
plt.tight_layout()
plt.savefig('Figures/perfused_hypoxic_s2v_waveSpeed.svg')
** plotting normox and anox cell density 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/anox_k070_r0100_1mm_d45_10s/', 'Data/anox_k070_r0100_1mm_d67_10s/', 
            'Data/anox_k070_r0100_1mm_20s/', 'Data/anox_k070_r0100_1mm_d112p5_10s/']
speeds_anox = getKwaveSpeed(datadirs, r0=100)
labels_anox = ['45k', '67.5k', '90k', '112.5k']
densities_anox = [45, 67.5, 90, 112.5]
legendTitle = r'Neuron Density (cells/mm$^3$)'
compareKwaves(datadirs, labels_anox, legendTitle, sbplt=132)
datadirs = ['Data/normox_k070_r0100_1mm_d45_10s/', 'Data/normox_k070_r0100_1mm_d67p5_10s/', 'Data/normox_k070_r0100_1mm_20s/',
            'Data/normox_k070_r0100_1mm_d112p5_10s/']
speeds_normox = getKwaveSpeed(datadirs, r0=100)
speeds_normox[0] = 0
labels_normox = ['45k', '67.5k', '90k', '112.5k']
densities_normox = [45, 67.5, 90, 112.5]
compareKwaves(datadirs, labels_normox, legendTitle, sbplt=131)
from matplotlib import pyplot as plt 
plt.subplot(133)
plt.plot(densities_normox, speeds_normox, '*-', label='Perfused')
plt.plot(densities_anox, speeds_anox, '*-', label='Hypoxic')
legend = plt.legend(title='Tissue Oxygenation', fontsize=12)
plt.setp(legend.get_title(), fontsize=14)
plt.xlabel(r'Neuron Density (x 1000 cells/mm$^3$)', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(131)
plt.xlim(0,10)
plt.ylim(-10,650)
plt.title('Perfused', fontsize=18)
plt.subplot(132)
plt.xlim(0,10)
plt.ylim(-10,650)
plt.title('Hypoxic', fontsize=18)
plt.subplot(133)
plt.title('SD Wave Speed', fontsize=18)
fig = plt.gca()
fig.figure.set_figheight(7.6)
fig.figure.set_figwidth(14)
plt.tight_layout()
plt.savefig('Figures/perfused_hypoxic_density_waveSpeed.svg')
** slice thickness
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/normox_k070_r0100_1mm_100um_10s/', 'Data/normox_k070_r0100_1mm_200um_10s/',
            'Data/normox_k070_r0100_1mm_300um_10s/', 'Data/normox_k070_r0100_1mm_400um_10s/',
            'Data/normox_k070_r0100_1mm_500um_10s/', 'Data/normox_k070_r0100_1mm_600um_10s/',
            'Data/normox_k070_r0100_1mm_700um_10s/', 'Data/normox_k070_r0100_1mm_800um_10s/']
speeds_normox = getKwaveSpeed(datadirs, r0=100)
speeds_normox[0] = 0
labels_normox = [r'100 $\mu$m', r'200 $\mu$m', r'300 $\mu$m', r'400 $\mu$m', r'500 $\mu$m', r'600 $\mu$m', r'700 $\mu$m', r'800 $\mu$m']
thick_normox = [100, 200, 300, 400, 500, 600, 700, 800]
legendTitle = 'Slice Thickness' 
compareKwaves(datadirs, labels_normox, legendTitle, sbplt=131)
datadirs = ['Data/anox_k070_r0100_1mm_Lz100_12s/', 'Data/anox_k070_r0100_1mm_20s/', 
            'Data/anox_k070_r0100_1mm_300um_20s/', 'Data/anox_k070_r0100_1mm_400um_20s/', 
            'Data/anox_k070_r0100_1mm_Lz500_12s/', 'Data/anox_k070_r0100_1mm_600um_12s/',
            'Data/anox_k070_r0100_1mm_Lz700_12s/', 'Data/anox_k070_r0100_1mm_Lz800_12s/']
speeds_anox = getKwaveSpeed(datadirs, r0=100)
labels_anox = [r'100 $\mu$m', r'200 $\mu$m', r'300 $\mu$m', r'400 $\mu$m', r'500 $\mu$m', r'600 $\mu$m', r'700 $\mu$m', r'800 $\mu$m']
thick_anox = [100, 200, 300, 400, 500, 600, 700, 800]
compareKwaves(datadirs, labels_anox, legendTitle, sbplt=132)
from matplotlib import pyplot as plt 
plt.subplot(133)
plt.plot(thick_normox, speeds_normox, '*-', label='Perfused')
plt.plot(thick_anox, speeds_anox, '*-', label='Hypoxic')
legend = plt.legend(title='Tissue Oxygenation', fontsize=12)
plt.setp(legend.get_title(), fontsize=14)
plt.xlabel(r'Slice Thickness ($\mu$m$^{-2}$)', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(131)
plt.xlim(0,10)
plt.ylim(-10,710)
plt.title('Perfused', fontsize=18)
plt.subplot(132)
plt.xlim(0,10)
plt.ylim(-10,710)
plt.title('Hypoxic', fontsize=18)
plt.subplot(133)
plt.title('SD Wave Speed', fontsize=18)
fig = plt.gca()
fig.figure.set_figheight(7.6)
fig.figure.set_figwidth(14)
plt.tight_layout()
plt.savefig('Figures/perfused_hypoxic_thickness_waveSpeed.svg') 
** combo anox/normox k0 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/normox_k030_r0100_1mm_10s/', 
            'Data/normox_k040_r0010_1mm_10s/', 'Data/normox_k050_r0100_1mm_10s/',
            'Data/normox_k060_r0100_1mm_10s/', 'Data/normox_k070_r0100_1mm_20s/']
speeds_normox = getKwaveSpeed(datadirs, r0=100)
labels_normox = ['30 mM', '40 mM', '50 mM', '60 mM', '70 mM']
densities = [30, 40, 50, 60, 70]
legendTitle = r'Initial Bolus [K$^+$]'
compareKwaves(datadirs, labels_normox, legendTitle, sbplt=131)
datadirs = ['Data/anox_k030_r0100_1mm_10s/', 
            'Data/anox_k040_r0100_1mm_10s/', 'Data/anox_k050_r0100_1mm_10s/',
            'Data/anox_k060_r0100_1mm_10s/', 'Data/anox_k070_r0100_1mm_20s/']
speeds_anox = getKwaveSpeed(datadirs, r0=100)
labels_anox = ['30 mM', '40 mM', '50 mM', '60 mM', '70 mM']
compareKwaves(datadirs, labels_anox, legendTitle, sbplt=132)
from matplotlib import pyplot as plt 
plt.subplot(133)
plt.plot(densities, speeds_normox, '*-', label='Perfused')
plt.plot(densities, speeds_anox, '*-', label='Hypoxic')
plt.xlabel(r'Initial Bolus [K$^+$] (mM))', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
legend = plt.legend(title='Tissue Oxygenation', fontsize=12)
plt.setp(legend.get_title(), fontsize=14)
plt.subplot(131)
plt.xlim(0,10)
plt.ylim(-10,710)
plt.title('Perfused', fontsize=18)
plt.subplot(132)
plt.xlim(0,10)
plt.ylim(-10,710)
plt.title('Hypoxic', fontsize=18)
plt.subplot(133)
plt.title('SD Wave Speed', fontsize=18)
fig = plt.gca()
fig.figure.set_figheight(7.6)
fig.figure.set_figwidth(14)
plt.tight_layout()
plt.savefig('Figures/perfused_hypoxic_k0_waveSpeed.svg')
** r0 
from plotting import compareKwaves, getKwaveSpeed 
datadirs = ['Data/anox_k070_r050_1mm_10s/', 'Data/anox_k070_r0100_1mm_20s/', 'Data/anox_k070_r0150_1mm_10s/']
speeds_anox = getKwaveSpeed(datadirs, r0=100, tcut=10)
labels = ['50 $\mu$m', '100 $\mu$m', '150 $\mu$m']
radii = [50, 100, 150]
legendTitle = 'Bolus Radius'
compareKwaves(datadirs, labels, legendTitle, sbplt=132)
datadirs = ['Data/normox_k070_r050_1mm_10s/', 'Data/normox_k070_r0100_1mm_20s/', 'Data/normox_k070_r0150_1mm_10s/']
speeds_normox = getKwaveSpeed(datadirs, r0=100, tcut=10)
compareKwaves(datadirs, labels, legendTitle, sbplt=131)
from matplotlib import pyplot as plt 
plt.subplot(133)
plt.plot(radii, speeds_normox, '*-', label='Perfused')
plt.plot(radii, speeds_anox, '*-', label='Hypoxic')
plt.xlabel(r'Initial Bolus Radius ($\mu$m))', fontsize=14)
plt.ylabel(r'K$^+$ Wave Speed (mm/min)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
legend = plt.legend(title='Tissue Oxygenation', fontsize=12)
plt.setp(legend.get_title(), fontsize=14)
plt.subplot(131)
plt.xlim(0,10)
plt.ylim(-10,710)
plt.title('Perfused', fontsize=18)
plt.subplot(132)
plt.xlim(0,10)
plt.ylim(-10,710)
plt.title('Hypoxic', fontsize=18)
plt.subplot(133)
plt.title('SD Wave Speed', fontsize=18)
fig = plt.gca()
fig.figure.set_figheight(7.6)
fig.figure.set_figwidth(14)
plt.tight_layout()
plt.savefig('Figures/perfused_hypoxic_r0_waveSpeed.svg')
** SpatialModelRealistic.py: v0.51.4 - evenly distributed the center and peripheral recorded neurons

* [2021-8-20 Fri] - cell s:v code
** code for analyzing suter cell s:v 
import json 
with open('suter_shepherd_data.json', 'rb') as fileObj: 
  data = json.load(fileObj)                 
s2vs = []
for nrn in data['_embedded']['neuronResources']: 
  print(nrn['neuron_id']) 
  s2vs.append(float(nrn['surface']) / float(nrn['volume'])) 

* [2021-8-27 Fri] - abstract and top v center 
** janelia abstract due today 
** running top vs center of anoxic slice on downstate hpc 

* [2021-9-3 Fri] - periph vs center, primed tissue, independent contribution of alpha 
** primed alpha = 0.12, lambda = 1.57
** SpatialModelRealistic.py: v0.51.5 - includes alphas for primed with propionate and brainstem, changed periph vs center layout
** running primed on Normal and periph vs. center on BigMem

* [2021-9-5 Sun] - include propionate in figure 
** normox, primed, anox fig 
from plotting import compareKwaves, getKwaveSpeed, getSpkMetrics
datadirs = ['Data/normox_k070_r0100_1mm_20s/',
            'Data/primed_k070_r0100_1mm_20s/',
            'Data/anox_k070_r0100_1mm_20s/']
pos = [None, 'center', None]
speeds = getKwaveSpeed(datadirs, r0=100, tcut=10)
labels = [cond + r': %.2f mm/min' % (s) for cond, s in zip(['Perfused','Primed','Hypoxic'],speeds)]
legendTitle = 'Condition'
from matplotlib import pyplot as plt 
fig = plt.figure()
compareKwaves(datadirs, labels, legendTitle, sbplt=311)
metrics = [getSpkMetrics(d, uniform=True, position=p) for d, p in zip(datadirs,pos)]
labels = ['Perfused','Primed','Hypoxic']
for m, l in zip(metrics, labels):
  r = [k for k in m.keys()]
  spkDur = [m[k]['spkDur'] for k in m.keys()]
  spkFreq = [m[k]['spkFreq'] for k in m.keys()]
  nSpks = [m[k]['nSpks'] for k in m.keys()]
  t2firstSpk = [m[k]['t2firstSpk'] for k in m.keys()]
  plt.subplot(323)
  plt.scatter(r, t2firstSpk, label=l)
  plt.subplot(324)
  plt.scatter(r, spkFreq, label=l)
  plt.subplot(325)
  plt.scatter(r, nSpks, label=l)
  plt.subplot(326)
  plt.scatter(r, spkDur, label=l)
plt.subplot(323)
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Time to First Spike (s)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(324)
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Spike Frequency (Hz)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(325)
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Number of Spikes', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.subplot(326)
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Spiking Duration (s)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylim(-.1, 2)
fig.set_figheight(9)
fig.set_figwidth(12)
plt.tight_layout()
plt.savefig('Figures/primed_perfused_hypoxic_density_summary.svg')

* [2021-9-7 Tue] - paper outline (see [2021-9-28 Tue])

* [2021-9-9 Thu] - data analysis todo's 
** compare wave pos in different runs 
from plotting import compareKwaves, getKwaveSpeed
datadirs = ['Data/normox_k070_r0100_1mm_sa2v2_10s/', 
            'Data/normox_k070_r0100_1mm_sa2v2_10s_v2/']
speeds_normox = getKwaveSpeed(datadirs, r0=100, rmax=600)
legendTitle = 'S:V = 2'
labels_normox = ['v1', 'v2']
compareKwaves(datadirs, labels_normox, legendTitle,
** seem to be some genuine differences depending on random seed, may want to run 
multiple runs for each parameter . . . 
** plotting.py: v0.18 - introduced function for computing spike metrics (e.g. frequency, duration of spiking)
** compare spiking patterns in different states (here normox v. hypox, top v. bottom)
*** probably better to compare top to periph in each panel rather than normox to anox 
from plotting import getSpkMetrics 
datadir = 'Data/normox_periphVcenter_1mm_400um_20s/'
normox_center = getSpkMetrics(datadir)
normox_periph = getSpkMetrics(datadir, position='periph')
datadir = 'Data/anox_periphVcenter_1mm_400um_20s/'
anox_center = getSpkMetrics(datadir)
anox_periph = getSpkMetrics(datadir, position='periph')
anox_center_r = [k for k in anox_center.keys()]
anox_periph_r = [k for k in anox_periph.keys()]
normox_center_r = [k for k in normox_center.keys()]
normox_periph_r = [k for k in normox_periph.keys()]
anox_center_spkFreq = [anox_center[k]['spkFreq'] for k in anox_center.keys()]
anox_periph_spkFreq = [anox_periph[k]['spkFreq'] for k in anox_periph.keys()]
normox_center_spkFreq = [normox_center[k]['spkFreq'] for k in normox_center.keys()]
normox_periph_spkFreq = [normox_periph[k]['spkFreq'] for k in normox_periph.keys()]
anox_center_spkDur = [anox_center[k]['spkDur'] for k in anox_center.keys()]
anox_periph_spkDur = [anox_periph[k]['spkDur'] for k in anox_periph.keys()]
normox_center_spkDur = [normox_center[k]['spkDur'] for k in normox_center.keys()]
normox_periph_spkDur = [normox_periph[k]['spkDur'] for k in normox_periph.keys()]
anox_center_nSpks = [anox_center[k]['nSpks'] for k in anox_center.keys()]
anox_periph_nSpks = [anox_periph[k]['nSpks'] for k in anox_periph.keys()]
normox_center_nSpks = [normox_center[k]['nSpks'] for k in normox_center.keys()]
normox_periph_nSpks = [normox_periph[k]['nSpks'] for k in normox_periph.keys()]
anox_center_t2firstSpk = [anox_center[k]['t2firstSpk'] for k in anox_center.keys()]
anox_periph_t2firstSpk = [anox_periph[k]['t2firstSpk'] for k in anox_periph.keys()]
normox_center_t2firstSpk = [normox_center[k]['t2firstSpk'] for k in normox_center.keys()]
normox_periph_t2firstSpk = [normox_periph[k]['t2firstSpk'] for k in normox_periph.keys()]
from matplotlib import pyplot as plt 
fig, big_axes = plt.subplots( figsize=(14, 7.6) , nrows=1, ncols=1, sharey=True)
# for row, big_ax in enumerate(zip(big_axes,['Perfused']), start=1):
big_axes.set_title('Perfused', fontsize=22)
# Turn off axis lines and ticks of the big subplot 
# obs alpha is 0 in RGBA string!
big_axes.tick_params(labelcolor=(1.,1.,1., 0.0), top='off', bottom='off', left='off', right='off')
# removes the white frame
big_axes._frameon = False
ax1 = fig.add_subplot(1,4,1)
plt.scatter(normox_center_r, normox_center_t2firstSpk, label='Center')
plt.scatter(normox_periph_r, normox_periph_t2firstSpk, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Time to First Spike (s)', fontsize=14)
plt.legend(fontsize=14)
ax2 = fig.add_subplot(1,4,2)
plt.scatter(normox_center_r, normox_center_spkFreq, label='Center')
plt.scatter(normox_periph_r, normox_periph_spkFreq, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Spike Frequency (Hz)', fontsize=14)
ax3 = fig.add_subplot(1,4,3)
plt.scatter(normox_center_r, normox_center_spkDur, label='Center')
plt.scatter(normox_periph_r, normox_periph_spkDur, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Spiking Duration (s)', fontsize=14)
# plt.ylim(-.05, .9)
ax4 = fig.add_subplot(1,4,4)
plt.scatter(normox_center_r, normox_center_nSpks, label='Center')
plt.scatter(normox_periph_r, normox_periph_nSpks, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Number of Spikes', fontsize=14)
plt.tight_layout()
fig2, big_axes2 = plt.subplots( figsize=(14, 7.6) , nrows=1, ncols=1, sharey=True)
# for row, big_ax in enumerate(zip(big_axes,['Perfused']), start=1):
big_axes2.set_title('Hypoxic', fontsize=22)
# Turn off axis lines and ticks of the big subplot 
# obs alpha is 0 in RGBA string!
big_axes2.tick_params(labelcolor=(1.,1.,1., 0.0), top='off', bottom='off', left='off', right='off')
# removes the white frame
big_axes2._frameon = False
ax5 = fig2.add_subplot(1,4,1)
plt.scatter(anox_center_r, anox_center_t2firstSpk, label='Center')
plt.scatter(anox_periph_r, anox_periph_t2firstSpk, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Time to First Spike (s)', fontsize=14)
plt.legend()
ax6 = fig2.add_subplot(1,4,2)
plt.scatter(anox_center_r, anox_center_spkFreq, label='Center')
plt.scatter(anox_periph_r, anox_periph_spkFreq, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Spike Frequency (Hz)', fontsize=14)
ax7 = fig2.add_subplot(1,4,3)
plt.scatter(anox_center_r, anox_center_spkDur, label='Center')
plt.scatter(anox_periph_r, anox_periph_spkDur, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Duration of Spiking (s)', fontsize=14)
ax8 = fig2.add_subplot(1,4,4)
plt.scatter(anox_center_r, anox_center_nSpks, label='Center')
plt.scatter(anox_periph_r, anox_periph_nSpks, label='Periphery')
plt.xlabel(r'Radius ($\mu$m)', fontsize=14)
plt.ylabel('Number of Spikes', fontsize=14)
# fig.set_figheight(7.6)
# fig.set_figwidth(14)
plt.tight_layout()
plt.savefig('Figures/perfused_hypoxic_center_vs_top_spkMetrics.svg')
** center vs. periph heat maps 
*** anoxic 
from plotting import comboVmembPlot
datadir = ['Data/normox_periphVcenter_1mm_400um_20s/']
spatialBin = 50 
noverlap = 10 
poolsize=16 
rmax = 680 
duration = 20
from matplotlib import pyplot as plt
fig = plt.figure()
fig.set_figheight(7.6)
fig.set_figwidth(14)
comboVmembPlot(datadir[0], duration, spatialbin=spatialBin, noverlap=noverlap, poolsize=poolsize, rmax=rmax, sbplt=121)
comboVmembPlot(datadir[0], duration, spatialbin=spatialBin, noverlap=noverlap, poolsize=poolsize, rmax=rmax, sbplt=122, position='periph')
plt.subplot(121)
plt.clim(-80,-15)
plt.ylim(0,600)
plt.title('Center', fontsize=18)
plt.subplot(122)
plt.clim(-80,-15)
plt.ylim(0,600)
plt.title('Periphery', fontsize=18)

* [2021-9-10 Fri] - all species gif - still not right with axis overlap 
** all species movies 
from plotting import allSpeciesGifs
datadir = 'Data/normox_periphVcenter_1mm_400um_20s/'
duration = 20
vmaxes = [40, 130, 140, 0.01]
vmins = [3.5, 40, 20, 0.0]
outpath = 'Data/normox_allspecies_figs/'
extent = (-500, 500, -500, 500)
figname = 'Figures/normox_allspecies'
allSpeciesGifs(datadir, outpath, vmins, vmaxes, figname, dur=duration, extent=extent)

* [2021-9-15 Wed] - planning 
** icsd poster - still unsure in person or online
** o2 dropoff, passive mechanism, proton leak  
*** When pparam=20, no elevated K+, O2 drops to zero through most of slice within 
1 sec 
*** When papram=25, no elevated K+, O2 drops, but takes 5 sec at worst or levels 
out to steady state with depth
*** bill thinks OK to keep Na/K pump parameter used in wei et al, easier to justify
*** bill also thinks maybe passive mech should be replaced with H+ leak, makes prediction
w/ respect to pH at least 
**** Zhou2010-dr shows transient acidification during SD 
*** should talk to someone (maybe Carter) about measuring [O2] in a slice 
** TODOS 
*** DONE check if everything looks ok with original intracellular concentrations 
**** easier to justify using wei's values
*** DONE add user definition of random seed 
** sims to run 
*** 5x for each parameter, hypoxic and perfused 
*** add 75um and 125 um for KBR 
*** same setup for primed as perfused and hypoxic 
*** add 120k neurons/mm3 for neuronal density 
** questions for sabina 
*** change in neuronal volume fraction associated with ischemia
**** Liang2007-ot suggests most of cell swelling in ischemia is astrocyte swelling 
**** above cites these - Su2002-au, Su2002-hr, Nicotera2003-kw, about astrocyte
swelling, don't address neurons really  

* [2021-9-16 Thu] - running some sims 
** SpatialModelRealistic.py: v0.52 - original concentrations, option for original o2 bath, user specified random seeds
** sims 
*** original concentrations 
*** original o2 bath

* [2021-9-17 Fri] 
** get SD with both original o2 bath and original concentrations

* [2021-9-20 Mon] - iCSD 2021 Day 1
** Jens Dreier - SD master class, basic science  
*** neurons are little batteries, SD is complete dischage of these batteries 
**** gibbs free energy released (thomas isele)
***** contribution of electric field very small 
**** distinguished from seizure whihc is only partial discharge 
*** decrease in extracellular osmolarity during SD 
**** changes in concentrations - Hansen1981-tn, Kraig1978-pg, Windmuller2005-uv
***** physiological Na: 150 mM; SD na: 60 mM 
***** phys K+: 3 mM; SD K+: 53 mM 
***** phys Cl-: 135 mM; SD Cl-: 95   
**** more Na+ flows into the neuron than K+ flows out 
**** "physiological state of cells called double gibbs-donnan steady state", during
SD neuronal state changes towards a Donnan equilibrium 
***** [[https://en.wikipedia.org/wiki/Gibbs%E2%80%93Donnan_effect][ehaviour of charged particles near a semi-permeable membrane that sometimes fail to distribute evenly across the two sides of the membrane]]
**** water flow into neurons, increased volume during SD 
*** SD precedes brain infarct Luckl Luckl2018-yo
*** terminal SD precedes cardiac arrest
****  first report of terminal spreading depolarization in the human brain 
prior to clinical brain death and major cardiopulmonary failure Carlson2018-ps
**** followd by negative ultraslow potential 
*** also in ischemic penumbra 
**** ischemia results in slow increase in K+ which precedes the SD  
**** O2 + L-arginine + NADPH -> NO + L-citrulline + NADP+ (via NO synthase) 
*** in naive mouse recordings, [K+] increase follows increase in DC potential 
**** firing ahead of the K+ wave front was synchronous ahead of the K+ wave 
***** guy from maybe somjen paper (90s), maybe something to do with gap junctions 
**** from Somjen2001-jh
The core of Grafstein’s idea survives today. There is
little doubt that the rise of [K1]o is a link in the chain of
events causing SD. There were, however, problems with
the details of the theory, as originally formulated. To the
surprise of most, tetrodotoxin (TTX) did not prevent SD,
even though it suppressed action potential firing (94, 181,
299, 400). Today we know, of course, that K1 can be
released from cells without the firing of action potentials.
Yet another problem is that, at a given point in the tissue,
[K1]o does not start to increase ahead of the DVo, as it
should, if K1 were the agent of the propagation of SD
(134, 219). As we shall see in section IIIJ, the increase in
[K1]o appears to be a key to the ignition and the evolution
of the SD process (162), but not necessarily to its propagation 
(see sect. IIIL). In contrast, during hypoxia there
always is a slow, gradual increase in [K1]o well before the
start of the DVo (122, 123), which may well be important
in the spread of HSD (6).
**** does seem to be correct that K+ does increase before DC potential in slices 
though 
** Jed Hartings - ID of SD in Bedside ECoG w/ Moberg CNS 
*** spontaneous activity (evidenced by high freq oscillations) 
remains depressed after negative DC shift
*** spontaneous activity does not entirely return to normal for 20 min, long after
the end of depression period 
*** "brain tsunamis" at charite-academy.de 
**** linked to criticality as well? 
** Serge Charpak - bridging the gap between mesoscopic brain imaging 
*** neurovascular coupling in olfaction
*** calcium signals are linearly correlated to local functional hyperemia (RBC velocity
increase in capilaries)
** R David Andrew - prelimary evidence for the release of a SD activator 
evoked by metabolic stress 
*** K+ and glutamate are not the drivers of SD 
*** palytoxin changes Na/K pumps to open channels 
*** Na/K facts 
**** 37x higher in neurons than straital muscle, 16x higher than in cardiac muscle 
**** 50-90 pumps per spine 
*** palytoxin induces SD, swelling, and beading at low concentrations
** Isamu Aiba - genotype specific spontaneous cortical SD patterns in two 
K+ channel deficient epilepsy mice 
** Eszter Farkas - N, N - Dimethyltryptamine attenuates SD 
*** DMT facts 
**** protects iPSC derived cortical neurons against hypoxia Szabo2016-cl
**** increased after exp heart attack in rats Dean2019-gc
**** nonselective sigma-1 receptor agonist
*** sigma-1 receptors
**** controls Ca2+ traffic between mitochondria-associated endoplasmic reticulum 
membran complex 
**** can translocate to cell membrane to modulate receptor channel function 
****  promotes cell survival under stress 
**** agonism attenuates NMDA receptor activated Ca2+ response in cultured neurons 
**** agonism depresses Ca2+ currents with corresponding inactivation of voltage gated 
Ca2+ channels 
*** DMT and other sigma-1 receptor agonists attenuate SD Szabo2021-jn 
**** DMT protected against cell death 
*** Ketamine also limits SD because of inhibition of Ca2+ response
** clemens reiffurth - SD in wake of stroke in parmacogenetic mouse modle of reversible 
neuronal suppression
** ali gorji - Cortical SD and neuroinflammation 
*** SD increases astrocitic volumes and astrocyte count 
** jeffery noebels - SD arises in hyperexcitable glioma microenvironment 
*** SD and seizure starting near tumor margin Hatcher2020-fu
*** SD onset precedes seizure onset (unpublished)
*** unexplained clinical deficits in brain tumor patients, precise mechanism not 
clear, may be related to SD Fisher1978-gg

* [2021-9-21 Tue] - iCSD 2021 Day 2
** massimo mantegazza - NaV1.1, GABA activation, and SD 
*** optogenetic stim of inhib interneurons initiated SD 
**** acute hyperactivation of NaV1.1 in GABAergic neurons 
**** haploinsufficiency  of NaV1.1 inhibits optogenetic inhibition of Chever2021-bi
**** Modeling NaV1.1/SCN1A Sodium Channel Mutations in a Microcircuit with 
Realistic Ion Concentration Dynamics Suggests Differential GABAergic Mechanisms
Leading to Hyperexcitability in Epilepsy and Hemiplegic Migraine Lemaire2021-bu
***** two cells, 1 pyr (similar to our model), 1 gabaergic 
*** very high firing rates during SD >300Hz 
** Roustem Khaziopv - depth profile of SD 
*** paradoxical SD - "SD + boom" 
*** showed full and partial SDs, partial SDs didn't propagate all the way to white matter 
**** loss of L2/3 sink of UP-states cuases boost of activity at cortical surface during 
partial SD 
*** SD easier to induce and travels horizontally mainly through superficial layers of cortex 
**** Full SDs transform to partial SDs during horizontal spread 
*** SD doesn't tend to propagate through horizontally through 
** Louisiane Lemaire - math model of NaV1.1 
*** only two cells, connected synaptically, dynamic ion concentrations, might want 
to collaborate w/ her and massimo 
**** based on desroche - Desroches2019-wq
**** gabaergic neurons: no cotransporters or chloride leak 
*** pyr neurons are very close to our model
*** includes gaba neuron 
*** NaV1.1 mutations 
**** gain of function - familial hemiplegic migraine type 3 
***** partially replace transient current with persistent current pnap = 
**** loss of function - Dravet syndrome 
** Mickael Tanter - ultrasound in neuroscience 
*** ultrafast ultrasound scanning good for tissue mech properties
*** can visualize slow blood flow in small vessels
*** functional ultrasound in brain (e.g. tonotopic maps)
** Sebastian Major - automated detection of SD w/ ECoG and machine learning 
*** poisson-like distribution of SD after stroke, most occur within 7 days 
** Robert Wykes - graphene probes for measuring SDs 
*** more optogenetic stimulation of SD (stim in motor, measure in somatosensory)
*** MK801 suppersses SD, as does ketamine but transiently 
** Stephen Jones - Non-Invasive Detection of Cortical Spreading Depolarization 
*** concussions 
*** cerebroscope 
** Mihika Congoli - DTI and dynamic diffusion imaging and CSD 
*** postdoc at uniformed services university and nih  
*** increased risk of stroke with migraine aura (studies in denmark)
*** pnas, exercise, migraine aura 2006?
** Christophe Dubois - long term neuronal Ca+-related activities after TBI 

* [2021-9-22 Wed] - iCSD 2021 Day 3
** Sergei Kirov - astrocyte swelling during SD 
*** during (HM) SD, astroglial soma swelled by 35% 

* [2021-9-23 Thu] - iCSD takeaways 
** model seems to be in support of Graftein's hypothesis
*** seems like it's OK that K+ increases before since in vitro context 
*** may still be interesting to show that even if K+ is not the driving 
agent of SD propagation in vivo, might be in vitro (prob controversial)
*** at least might be interesting that whatever the agent of propagation,
the combined effect of synaptic activity, Ca2+ signalling, etc. results in
something that maintains similar dynamics as if K+ were the agent of propagation 
*** might want to try running with TTX, see if SD persists 
*** in 2005, anthony strong still convinced of grafstein's hypothesis Strong2005-gn
*** letter from herreras and reply from strong and somjen Herreras2005-yp
** note on O2 in vivo 
The depolarization itself is associated with marked vasodilatation, which is 
followed by prolonged but moderate hypoperfusion (59, 102, 124, 127, 207, 210, 
211, 254, 257, 308, 444, 445). Local blood flow is so abundant that hemoglobin
oxygenation increases in spite of increased metabolic demand (445) and 
extracellular tissue oxygen tension (PO2) tends to increase, especially at the 
onset of SD, although it may decrease later (219, 443).
*** 443: Wolf1996-mh
** refs for SD in human disease 
*** 58% TBI Hartings2011-gd
*** 67% perihematomal edema / ischemia Helbok2017-hq
*** 72 % subarachnoid hemmorage Dreier2006-mx 
*** 100% ischemic stroke Dohmen2008-gh (2 patients)

* [2021-9-24 Fri] - possible different direction for paper 
** Practically no interest in the poster at iCSD 2021 
*** Only had a couple technical questions from who I can only assume was a 
poster judge.  Nothing about resutls.
*** The focus on propagation implies support of Grafstein's hypothesis 
(K+ is "agent of propagation"), and these people hate that with fairly 
good reasons. 
**** Even though rise in K+ precedes rise in DC potential in slices, no 
reason to think mechanism of spread is different in slices vs in vivo. 
*** SD can encompass entire hemisphere, even entire cortex, so the these
tiny waves of K+ are pretty unimpressive.
*** Most of presentations were looking in vivo, so the finer points of 
SD in slices probably isn't too interesting.
** Could pivot to SD initiation in vivo 
*** Lot's of interest at meeting in at initiation 
**** Activating GABAergic neurons, palytoxin (and palytoxin like substances), etc.
*** We could investigate SD initiation in small volume of of tissue in vivo 
**** ischemia - already ran sims like this 
***** "average distance from capillary to neuron of 8–20 um" Spencer2007-si, Schlageter1999-ot
***** SD initiation from ischemic core of 100um radius is fairly relevant
***** SD, bizzarely, doesn't necessarily propagate, can just be picked up on single electrode,
so small volume and lack of emphasis on propagation is less of an issue.
**** ouabain blocks Na/K - real easy to test out 
**** palytoxin Na/K pump -> channel Dreier2002-xs - would take some doing 
***** relates to andrew's SD propagation agent idea 
**** NaV1.1 mutation - really simple model published in PLOS Comp Bio Lemaire2021-bu, Chever2021-bi 
***** would need to add inhib neurons, maybe not for this paper, but at least demonstrates appetite 
for models about SD initiation.
** Benefits to pivoting
*** Can use time to initiation as measure of SD susceptibility 
**** time to initiation takes away some attention from K+ wave speed, which
would be a good thing, as it's really just *initial* K+ wave speed.  
Can still report it though.
**** can look at time to initiation + speed for things like S:V, cell density
*** Can probably ditch the passive (non-rxd) channel - need to double check 
**** initialy introduced to stabilize cells in in vitro context 
**** feels a bit hacky, even if there is some kind of H+ leak or something 
along those lines
*** in vivo, ischemia, etc. more clinically relevant, might actually get some 
interest/citations 

* [2021-9-26 Sun] - mods for in vivo 
** SpatialModelRealistic.py: v0.53 - setup for cores of ouabain, ischemia, and edema 

* [2021-9-28 Tue] - initial in vivo SD initiation sims 
** SD with ouabain and acute ischemia under normox conds 
*** ischemia takes a bit longer for initiation 
*** SD does not propagate far beyond the local region of the initial insult 
**** this is a good thing, suggests necessity of network effects (synaptic or gap
junction wiring) for SD propagation 
** sanity checks 
*** don't need pas mechanism, get fairly steady Vmembs w/ no insult in normox 
*** no SD with normox, ouabain, s:v = 0.02 
** checklist 
*** DONE - user specification of neuronal volume fraction
**** SpatialModelRealistic: v0.54 - user specifies neuronal volume fraction, sim computes appropriate radius for cell volume 
*** TODO - model effect of palytoxin: na/k pump -> open channel 
**** might not be necessary for this paper, not terribly popular for SD initiation, 
but relates to andrew's propagation agent hypothesis 
*** TODO - hypoxia, primed with no other insult

* [2021-9-29 Wed] - running sims 
** [[https://docs.google.com/spreadsheets/d/1GQZOW2T0D-SQGkGCrX_ZXbus83o5p2S21dRX_HMWnYY/edit?usp=sharing][sims to/have run]]
** setup account on stampede2 (project starts 10/1)
** setup sims on expanse using NSG allocation 
*** to use mpiexec, need:
module purge
module load slurm
module load cpu
module load gcc/10.2.0
module load openmpi/4.0.4

* [2021-10-6 Wed] - most 400um thick sims done 
** Wei was right about O2 in slices 95% O2 == 0.1 mM O2 
** different tissue insults 
*** should definitely include ouabain, shows can get SD without just dumping K+, 
also shows interesting / expected behaviors (occurs earlier/faster in primed, 
and earliest/fastest in hypoxic)
*** may want to mention in paper spontaneous SD in hypoxic and primed slice 
*** ouabain only decreases time to depol by ~.1s in both hypoxic and primed slice
** ouabain 10-20s for perfused looks great
** different result for parameter vs. wave speed with different thickness . . . but
now there's more O2 
*** Cell Density - clear increase for 200um thick, decrease/flat for 400 um thick
*** Bolus Radius - still decrease for hypox, flat/increase then decrease for perfused 
** working out stampede2 issues 
module purge 
module load intel   
module load python3/3.7.0 
cd /home1/06422/ckelley/spreadingdepression/

* [2021-10-8 Fri] - stampede and movies 
** got sim running on stampede2 
*** TODO - edit wiki 
*** TODO - fix issue with where it's writing output 
** making movies of species and spiking 
*** analysis.py: v0.19 - changing all species gif to mp4

* [2021-10-11 Mon] - thouhgts 
** make figs hypox vs. perfused, or just perfused, treating hypoxia and 
priming as insults in their own right 
*** depol in hypox and primed without any insult

* [2021-10-12 Tue] - ouabain, mannitol
** original ouabain / SD paper Balestrino1999-wv
Effects of extracellular hyperosmolarity on ouabain-induced spreading depression-like depolarization. Extracellular hyperosmolarity was increased
by adding the impermeant sugar mannitol 100 mM to the perfusion medium. The slice was perfused with this hypertonic medium for 30 min before Ž .
ouabain 100 mM was added arrow . No depolarization was observed. Similar results were obtained with 10 mM but not with 1 mM mannitol. See text for Ž .
more details and explanations.
** Sykova2008-av on mannitol:
The finite cylindrical geometry of
the probes, combined with the induced concentration
gradient, led to significant theoretical issues in the interpretation of the experiments (60). The diffusion profile of
[3H]mannitol approached quasi steady-state levels within
1 h, at which time the delivery of tracer was counteracted
by its loss from the ECS by passive uptake into cells and
by clearance across the BBB. The measured effective
diffusion coefficient was D*  3.6  106 cm2 /s, leading to lambda 1.44, with  alpha 0.36;
** notes for today's meeting 
*** wei right about O2 concentration in bath, reran all perfused sims with that O2 
*** reran all sims with 400 um thick slices - more typical and about where SD speed saturates 
*** added a few ouabain sims (block Na/K channels) 
**** good that the model can initiate SD multiple ways 
**** added benefit of having a latency to look at 
*** need to double check, but seems the relationship between cell density and SD speed 
is reversed when 400 um thick (decreasing) compared to when 200 um thick (increasing)
**** don't have a good explanation for this. relationship with S:V was consistent for instance 
*** ran a series of sims with different neuronal volume fractions, haven't checked output yet 

* [2021-10-13 Wed] - running sims 
** mannitol ECS properties increase latency and decrease speed with ouabain 
** SD wave speed decreases with cell density for both 200 and 400 um thick slice 
*** Think this results from changing cell radius to maintain alpha_nrn = 0.24
** ouabain in 100 um core seems to make no difference in K+ wave speed/latency 
** rerunning density sims for Lz=400um with fixed volume cells 
** rerunning nonuniform sims 

* [2021-10-14 Thu] - making figs and running sims 
** settled on figure comparing perfused, mannitol treated, propionate treated, and hypoxic 
tissue.
*** major role for volume fraction, maybe should look at independently 
** SpatialModelRealistic.py: v0.55 - nonuniform recording setup now has center as random pos in middle 50%, periph as random pos in top/bottom 25%
*** rerunning nonuniform sims on expanse 
** increased cell density increases SD wave speed when cell volume is held constant,
decreased SD wave speed when neuronal volume fraction  is held constant (fewer cells == larger cells)
** running perfused slices with constant tortuosity but variable volume fraction (hopefully shows that 
main effect on SD wave speed is volume fraction in different slice conditions)

* [2021-10-15 Fri] - total surface area
** K+ wave speed is proportional to total neuronal surface area in the tissue 

* [2021-10-19 Tue] - main figures done 
** analysis.py: v0.20 - sinkVsSource for looking at periods where cells act as K+ sink 

* [2021-10-20 Wed] - sims and analysis 
** SpatialModelRealistic.py: v0.56 - fixed lambda for mannitol, added user specification of tortuosity and O2 with otherwise perfused parameters
** running variable tort and o2 availability on expanse 
** analysis.py: v0.21 - new method for K+ wave speed in core vs periphery of slice

* [2021-10-25 Mon] - starting SFN poster 
** separate out slice thickness/depth K+ wave and position figs 
** bill seems to be good with figs 
** still need to flesh out r0 and k0 results with more sims 

* [2021-10-26 Tue] - mainly writing / sfn 2021 poster 

* [2021-11-2 Tue] - meeting today 
** Methods and Results not done but serviceable - big stuff is there 
** rerunning the propionate sims w/ half total Cl-, had just run half in ECS
which had a big effect 
** question: currently, neuronal volume fraction (swelling), S:V, and ECS 
volume fraction are all treated as independent variable, but obviously in 
reality they are independent.  However, one cannot directly infer one from 
the other: let's say ECS shrinks, is all of the volume gained by neurons, or 
does some go to glia, and if so how much? Could even be the slice itself that 
changes volume. Would it be worth running a few sims where we
can look at different percentages of neuronal compensation of changes in 
ECS volume fraction?  On the other hand, would be too complicated to incorporate 
accompanying changes to S:V, which becomes more complicated because of beading.  
Maybe better to keep everything separate (as feature, not bug), mention in discussionneed for 
better understanding of this interplay which can be incorporated in future model 
iterations.
** inds for example traces fig - iss = [0, 7, 10, 17, 25, 30, 35]

* [2021-11-11 Thu] - r0 and k0 
** updated r0 and k0 fig 

* [2021-11-18 Thu] - example traces figure 
** tried making one with flux and fewer panels - dki/dt is so small, no think it
may not be worth mentioning

* [2021-11-22 Mon] - S:V convo with bill
** sphere S:V = (4 pi r^2) / (4/3 pi r^3) = 1 / 3r
** cable S:V = (4 pi r^2) / (2 pi r^3) = 2 / r 

* [2021-11-29 Mon] - more s:v, sabina's comments
** done some scripting to analyze morphs from neuromorpho, significant difference 
between brainstem and neoctx principal cells 

* [2021-12-1 Wed] - dynamic ecs 
** sabina wants to see some attempt at dynamic ecs 
*** need rate for it to change at 
import numpy as np
import pickle 
k = np.linspace(3.5,70,20)         
dadt = [(ki-3.5)*(ki-70)*5e-10 for ki in k] 
with open('Data/r0100_k020_anoxic_20s_constKinfuse/recs.pkl', 'rb') as fileObj: 
  data = pickle.load(fileObj) 
alpha = [0.22]
for i, ko in enumerate(data['ko'][0]): 
  ind = np.argmin(np.square(np.subtract(dadt, ko))) 
  alpha.append(alpha[count]-dadt[ind]) 

* [2021-12-2 Thu] - stampede and addressing sabina's comments 
** got sims semi-running on stampede
*** creates folders but doesn't print output to log files or save any data 

* [2021-12-16 Thu] - dynamic alpha 
** got working w/ loads of help from adam
** having dynamic alpha (which drops to ~0.06 in the wake of the SD) increases propagation speed to ~3.3 mm/min 

* [2021-12-30 Thu] - minor touches 
** running dynamic alpha sim for 10s on 
** bill's new schematic fig - new text for right panel columns?

* checklist 
** DONE - rerun all perfused sims with oxygen concentration from wei 
** DONE - run ouabain sims
** DONE - choose reasonable range for neuronal volume fraction sims 
** DONE - run hypoxic with no insult 
** DONE - extend perfused with ouabain 
** DONE - primed no insult 
** DONE - wave speed k0=70 hypoxic
** DONE - run sims I'd want movies for with higher nrec 
** DONE - run center vs. periph sims 
** DONE - center vs periph fig(s)
** DONE - figs for cell vol fraction, tissue properties, insult properties, etc.
** DONE - run mannitol + ouabain sim 
** DONE - compare wave speed vs. cell density for two thicknesses - had to do with changes in volume 
** DONE - check mannitol sims - slower than perfused  
** DONE - compare ouabain to no insult - no clear difference 
** DONE - see if relationships between tissue props and wave speed correlate w/ total neuronal surface area 
** DONE - analyze K+ sink/source phases 
** DONE - in addition to ecs vol frac, look at tortuosity and oxygen availability 
*** start with one, maybe 5 of each 
** DONE - tissue thickness - center vs. periph K+ wave 
** DONE - characterize spiking activity 
** DONE - 5x k0 and r0 
*** DONE - write routine for generating sbatch files 
** DONE - 2D static figure 
** DONE - reshuffle for total surface area fig
** DONE - significance statement 
** DONE - find minima for r0 and k0 (or at least adjust y-axes)
** DONE - cut down / rewrite abstract 
** DONE - acknowledgements 
** DONE - thorough read through
** DONE - change references to mannitol to hypertonicity 
** DONE - rewrite bit about depolarization versus depression 
*** new: SD underlies spreading depression, where neurons remain in depolarization block following a burst of spiking, 
which causes a negative DC shift in extracellular field potentials, and resultant suppression of spontaneous neuronal 
activity causes reduction in higher frequency content of field potentials \cite{Dreier2011-ff}.
** DONE - rework schematic figure 
** DONE - abstract
** DONE - significance changes 
** DONE - try alpha = 0.42 (upper limit of biological plausibility Kume-Kick2002-yu)
*** running on zn 
** DONE - run dynamic alpha sim for 10 seconds, put in slice conds fig 
*** change vtissue to float 
** DONE - add ion and o2 concentrations to table
** DONE - credit GCP, Downstate HPC 
** DONE - create fresh github repo 
** TODO - fig 6C panel title 
** TODO - fix Vol_{nrn} issue

* Sabina's comments
** Title
*** OK but a bit descriptive. Can you incorporate the main finding of the study? Or at least mention
“propagation” – I gathered from your Intro (but not the Abstract) that that’s what the study is about.
**** Really just a place holder title at the moment 

** Abstract
*** Line 22-23: SD is also associated with seizures. E.g.,
https://www.biorxiv.org/content/10.1101/455519v2.full.pdf
**** can include
*** Lines 23-24: “SD … altered pharmacologically …” What does it mean?
**** changed altered to "facilitated or inhibited pharmacologically or by hypoxia"
*** Lines 25-25: “Computational modeling can help bridge the gap between SD in brain slices and SD
in pathology.” I guess here you try to communication why you’ve done this study. But this is not
clear, I do not know what you are trying to say.
**** fair point, can ditch, question of whether need some sort of motivating "why?"
sentence
*** Line 27: “channels … situated randomly in extracellular space”. Not on cellular membranes?
****  Changed to: "Thousands of neurons, each having 2 voltage-gated ion channels, 3 leak channels, and 3 
ion exchangers/pumps, were situated randomly in extracellular space (ECS)" - hopefully that clarifies
*** Lines 30-31: “In well-perfused slices, SD propagated through a hypoxic core.” Well-perfused
slices do not have a hypoxic core unless they are very thick.
**** trying to convey that the slice develops an hypoxic core during the SD because 
of the high metabolic demand imposed by high K+ 
*** Lines 36-38: mannitol and propionate are mentioned for the first time.
**** first time for everything 

** Significance 
*** Reads like your results/predictions
**** necessarily a bad thing?

** Introduction 
*** Lines 48-55: It is not clear to me why “spreading depolarization” rather than “spreading
depression” was chosen. Moreover, it is claimed that these two terms are related but not
synonymous; but this statement is not explained. I do not know why these should be different.
Aren’t these just two names for the same thing? Note that Leao is taking about “spreading
depression” not “spreading depolarization”. Somjen (2001) has a nice section about SD-
associated nomenclature.
**** Bill doesn't like that either. Talk by dreier had me all in on related by not 
the same, but that was at 4am, and now I'm not convinced myself.  May ditch this bit 
entirely for sake of clarity.
*** Lines 78-85: It seems that “propagation” of SD is the main theme of this ms. It is necessary to
make this clear earlier (title & abstract). It is also necessary to explain why it is important to
study propagation. Also, note that Kunkler and Kraig
(https://pubmed.ncbi.nlm.nih.gov/9547248/) studied propagation of SD using several
extracellular microelectrodes positioned 100 micrometers apart.
**** good points, no argument here 
 
** Model 
*** Were alpha_ECS and tortuosity dynamically changed during SD? It seems not – lines 114-117.
This is a problem.
**** No, alpha_ECS and tortuosity are fixed in time.  Agree that this is an issue.
It's addressed at some length in the discussion (limitations & future directions).
Bill's posish at least was "for the next paper"
*** Fig. 1 and its legend seem to contradict each other. In the cartoon, glia is shown to surround
each neuron + ECS. The legend says that glial channels/pumps are in every voxel of ECS.
**** I agree this is something of an issue: figure might be considered misleading
*** Lines 121-128: several issues. Perez-Pinzon’s study is on ischemia not hypoxia. Not sure where
alpha_ECS and lambda-ECS hypoxic values come from but they are not from Perez-Pinzon’s
study. Where do alpha_ECS and lambda-ECS in mannitol come from?
**** Perez-Pinzon is on a model of ischemia, a reduction in blood flow,
in slices, and the way they modeled ischemia is through hypoxia, reduced O2 (and glucose, but 
we don't look at glucose)
**** Adam picked those values originally, based on Sykova2008.  Reference to Perez-Pinzon 
is as much about the O2 / method.  Tbh, not sure precisely how Adam chose them, but they're 
awful close to Perez-Pinzon in slices and closest to Homola A, Zoremba N, Sˇ lais K, Kuhlen R, Sykova´ E. Changes
in diffusion parameters, energy-related metabolites and glutamate
in the rat cortex after transient hypoxia/ischemia. Neurosci Lett
404: 137–142, 2006.
**** mannitol: Sykova2008:
"The measured effective diffusion coefficient was D*  3.6  106 cm2
/s, leading to   1.44, with   0.36; the clearance rate constant was
2.2  105 s1 . The values of  and  differ somewhat
from those obtained with the radiotracer method (Table
1), but both estimates are probably affected by the nonideal behavior of mannitol, 
by different experimental paradigms, and by species differences."


* Paper Outline
** Abstract - needs serious trim (351 -> 250)
Spreading depolarization (SD), which is characterized by a breakdown in the homeostatic 
maintenance of intracellular and extracellular ion concentrations, can be elicited 
in brain slices. 
SD has been associated with a number of neurological conditions, 
including ischemia, migraine, and traumatic brain injury. 
Computational modeling of SD can help bridge the gap between experimental findings 
and pathophysiology.
We developed tissue-scale models of SD in submerged slices using the NEURON simulator and its 
reaction-diffusion module. 
Neurons with 2 voltage-gated ion channels, 3 leak channels, and 3 
ion exchangers/pumps were situated randomly (no layering or cell connectivity) 
in extracellular space (ECS) where ions (\k, \cl, \na) and \o2\ diffused.
Glia and neurons cleared \k\ from the ECS via \na/\k pumps and voltage-gated \k\ channels.
Our model produced SD which propagated through the slice at realistic speeds (< 15 mm/min). 
Our simulations suggest that the mechanism by which hypoxia, mannitol, and propionate 
influence SD propagation is through changing the volume fraction of the ECS.
Slice thickness and location in the slice (periphery vs center), O2 availability, 
neuronal surface area to volume ratio (S:V), cell density, and neuronal volume fraction
all contributed differently to SD propagation.  
SD generally traveled faster in hypoxic tissue. 
The model suggested that there will be an ischemic core even in well-perfused 
slice. 
Therefore, thickness affected SD velocity due to the relatively ischemic slice 
core showing faster propagation. 
In well-perfused slice, neurons on the periphery only showed modest depolarization 
and no SD.
By contrast, in ischemic slices, SD occurred throughout the slice, and there was 
less speed-up with increased thickness.
Our simulations suggest that simultaneous electrophysiological or 
ion-selective measurements at varying depths of a perfused slice should reveal 
SD travelling through the center, but not the periphery, of the slice, while 
measurements from an hypoxic slice should reveal SD travelling through the entire 
slice.
Based on simulations with different neuronal S:V, volume fractions, and cell densities,
we predict that SD propagation speed is proportional to the total neuronal surface 
area within the tissue.
Finally, we also predict that properties of the K+ bolus used to initiate SD should have 
little impact on its propagation. 

** Introduction 
*** overview of SD 
**** relation to spreading depression 
**** first demonstrated by leao 
**** speeds 
***** 1.8-3 mm/min Haas2009-rv
***** 2-7 Newton2018-cj, Newton2016-tp*
***** 4.2 - 5.1 Petzold2008-qe
***** 9.2 Woitzik2013-dm
*** SD in neurology 
**** stroke Newton2016-tp
Carlson2017-jk, Nakamura2010-oz, Li2015-qw, Li2014-se, Kirov2020-nu, Schoknecht2021-db, Obeidat2000-eo, 
Anderson2005-dk, Woitzik2013-dm, Kudo2008-qe, Ayata2015-ub, Petzold2005-sn, Menyhart2017-vl, Petzold2008-qe, 
Dreier2011-ff, Oliveira-Ferreira2012-mm
**** migraine 
Bertels2021-in, Olesen1981-qz, Rogawski2012-fg, Kroos2019-ib, Cozzolino2018-bu
**** sudep 
Cozzolino2018-bu, Aiba2015-lz, Cozzolino2018-sj, (contrary) Stewart2020-oo - as result of ischemia 
**** traumatic brain injury 
Sawant-Pokam2020-ib, Lauritzen2017-jl, Carlson2017-jk, Andrew2016-sx, Balanca2017-gd, Tas2019-dt
***** recent evidence shows spikes in intracranial pressure triggering SD.
**** epilepsy 
***** "Excitotoxic states are a common mechanism to both seizures, with neuronal 
activation, and CSD, with neuronal deactivation. Seizures have been seen prior to, 
during, and following CSD \cite{Koroleva1983-vz, Gorji2004-vl, Eickhoff2014-jt, Mody1987-po, Fabricius2008-pv}. 
Additionally, the individual states themselves appear to be interrelated" - Kramer2017-si
***** Chever2021-bi, Lemaire2021-bu - nav1.1 mutations implicated in both epilepsy 
and migraine 
***** some authors have also proposed that migraine and epilepsy form a continuum 
of excitotoxic brain states \cite{Belcastro2011-rs, Rogawski2012-fg}
***** SD and seizure starting near tumor margin Hatcher2020-fu
*** SD in slices 
**** neocortex - Andrew2016-sx, Petzold2008-qe, Wernsmann2006-sc, Joshi2001-be, Anderson2005-dk, Andrew2017-rn
**** hippocampus - Balestrino1999-wv, Balestrino1988-pk, Aitken1998-yh, Muller1998-zi, Wernsmann2006-sc, Hrabe2019-cj
**** brainstem - Andrew2016-sx, Devin_Brisson2013-rc
**** retina 
*** SD can be triggered experimentally by various means, including, but 
not limited to, electrical stimulation, mechanical insults, 
and administration of \k\, glutamate, and ouabain \cite{Cozzolino2018-sj}.
*** SD models? 
**** There have been many computational models of SD, mostly falling into two 
categories: 1) microscale, detailed models of one or a handful of cells focusing on SD initiation 
and the stereotypical neuronal membrane dynamics associated with 
SD \cite{Lemaire2021-bu, Chever2021-bi, Wei2014-go, Wei2014-fj, Oyehaug2012-av, Somjen2000-ro, Tuckwell1978-tq, Zandt2013-ce}
; 2) macroscale, abstract models of SD focusing on wave 
propagation \cite{Reggia1996-ts, Revett1998-ix, Gerardo-Giorda2017-wk, Reshodko1975-om, Via2017-sa} 
**** Here we present a model of SD with thousands of biophysically detailed 
neurons, embedded in an three dimensional extracellular space (ECS), which 
produces waves of depolarization and diffusing \k. 

** Methods 
*** brief intro
**** extension of framework from Wei2014-fj 
**** using NEURON and RxD \cite{Hines2001-of, Newton2018-cj}
**** while our model is not intended to reproduce the properties of any one 
region of the brain or specific pathophysiology, by manipulating isolated aspects
of the model we can gain qualitative insights into how these 
properties influence SD in real tissue.
*** the model
**** neurons 
***** Model neurons included voltage-gated \k\ and \na\ channels; 
\na, \k, and \cl\ leak channels; \k-\cl\ (KCC2) \cite{Payne2003-nu} and \na-\k-\cl\ (NKCC1) 
cotransporters; and \na/\k pumps \cite{Wei2014-fj}.
***** In order for cells to achieve a steady-state \vmemb\ embedded in the slice, 
we incldued an additional passive channel with reveral potential -70 mV and 
maximal conductance of 0.1 mS/cm$^2$.
***** Neurons were cylinders whose diameter was equal to their length. 
To assign arbitrary neuronal volume fraction (the ratio of total neuronal volume
to tissue volume, $\alpha_{nrn}$) and neuronal 
surface area to volume fraction (S:V), cells had one radius defining their S:V and 
another radius defining their volume. 
This was achieved with NEURON's FractionalVolume method.
***** Unless otherwise noted, $\alpha_{nrn}$ was fixed to 0.24 (Rice1998-ll), 
neuronal S:V = 3 $\mu$m$^{-1}$, and neuronal density was 90,000 neurons/mm$^3$,
all of which is typical for neocortex.

**** extracellular space 
***** Neurons were situated randomly throughout the extracellular space (ECS) where
extracellular ions (Na$^+_{ECS}$, K$^+_{ECS}$, Cl$^-_{ECS}$) diffused.
***** Extracellular volume fraction (the ratio of total extracellular space volume to
total tissue volume, $\alpha_{ECS}$) and extracellular tortuosity (definition, $\lambda_{ECS}$), 
were fixed in time and the same for all ions 
***** ECS voxel size - 25 um
***** We used Dirichlet boundary conditions to model the tissue submerged in a bath 
solution where all ion and \o2\ concentrations are constant.
**** glia 
***** Glia were not modeled as indidual cells; instead, the contributions of glia
were represented by a generalized voltage-gated \k\ current and \na/\k\ pump
dispersed equally through each ECS voxel \cite{Cressman2009-vy, Oyehaug2012-av, Wei2014-fj}.
**** slice properties 
***** Slices ranged in size: 1mm x 1mm x 100-800 $\mu$m.  The density of neurons in the slice 
also varied (45k - 112.5k neurons/mm$^3$). Unless otherwise noted, simulations 
presented here were from 1mm x 1mm x 200 $\mu$m slices with 90k neurons/mm$^3$.
***** Simulated slices were submerged in the bath solution where ion and \o2\ concentrations 
were equivalent to those in the ECS.
***** \o2\ diffused unhindered trough the slice and diffused into the slice 
from the bath solution.
***** SD was modeled in both perfused slice and hypoxic slices. 
In the perfused slice, [O$_2$]$_{bath}$ = 0.1 mM \cite{Wei2014-fj}, $\alpha_{ECS}$ = 0.2, 
and $\lambda_{ECS}$ = 1.6 \cite{Sykova2008-av}.
In the hypoxic slice, [O$_2$]$_{bath}$ = 0.01 mM \cite{Hoffman1996-dv},  $\alpha_{ECS}$ = 0.07, 
and $\lambda_{ECS}$ = 1.8 \cite{Perez-Pinzon1995-hx}.
**** SD initiation 
***** SD was initiated by elevating initial [\k]$_{ECS}] within a spherical bolus at 
the center of the slice. 
Initial bolus [\k]$_{ECS}] (KBC) varied from 30-70 mM.  
Initial bolus radius (KBR) varied from 50-150 $\mu$m. 
Unless otherwise noted, simulations were run with KBR = 100 $\mu$m and KBC = 70 mM.
***** We modeled priming the tissue for SD via propionate by reducing $\alpha_{ECS}$ 
in perfused slice to 0.12 \cite{Hrabe2019-cj}.
*** simulations 

**** To investigate the separate contributions of $\alpha_{nrn}$ and S:V, we varied S:V from 0.02 $\mu$m$^{-1}$ 
(corresponding to a cylinder whose radius was contrained
such that $\alpha_{nrn}$ = 0.24 for 90k neurons/mm$^3$ cell density) to 6.0 $\mu$m$^{-1}$, 
while holding $\alpha_{nrn}$ constant.
Similarly, we varied $\alpha_{nrn}$ from 0.165 to 0.54 while holding S:V constant.
We also investigated the influence of cell density, which we varied from 45,000 - 120,000 
neurons/mm$^3$ while holding either cell morphology (the surface area and volume of each neuron)
or $\alpha_{nrn}$ constant.

**** Over 600 simulations covering a range of slice sizes, cell densities, and durations. As an example 
of a typical simulation, simulating a 1 mm x 1 mm x 400 $\mu$ slice with a cell density of 90k neurons/mm$^3$
(36,000 neurons) for 20 s of simulation-time took roughly 25 hours on a single node Linux system 
using 48 2.40 GHz Intel Xeon E5-4610 CPUs simultaneously via MPI. 

** Results 
*** overview of SD in perfused slice - Fig 1 SD_inferno
**** small bolus of elevated K+ initiates SD
**** K+ wave travels radially outward from the edge of the \k\ bolus 
towards the edges of the slice at 2.4 mm/min.
**** A wave of neuronal depolarization follows in its wake travelling 
at 2.1 mm/min.
**** most cells within the \k\ bolus fire a single spike and remain in
depolarization block for seconds (SD_inferno, perfused_example_traces)
**** cells outside the \k\ bolus fire bursts of action potentials as [\k]$_{ECS}$
increases around them.
***** During the course of the SD burst, neuronal instantaneous firing rates 
increase to as high as 250 Hz, which is comparable to observations of firing rates 
during SD in hippocampal slices \cite{Lemaire2021-bu}.
***** Furthermore, spike heights decrease over the course of the 
burst \cite{Devin_Brisson2013-rc, Lemaire2021-bu}.
***** After as long as 500 ms of bursting activity, these cells remain in depolarization 
block for the remainder of the simulation.
*** Underlying SD is a wave of breakdowns in the maintenance of intra- and 
extracellular ion concentrations. perfused_example_traces
**** even in the core, neurons will act as a \k\ sink, but due to high [\k]$_{ECS}
and the rapid consumption of available \o2, \na/\k pumps fail and neurons become
\k\ sources.
**** When [\k]$_{ECS} reaches a threshold of ~14 mM, homeostatic mechanism totally
breakdown and intracellular \na\ and \cl\ increase dramatically as the cell loses \k\.
**** Because of the high rate of \o2\ consumption by both glial and neuronal 
\na/\k\ pumps in the core of the slice, ischemia spreads faster through the slice 
than the SD.
*** The propagation of SD can be altered by hypoxia and pharmacological manipulations.
**** We simulated the effects of hypoxia on SD by lowering [\o2]$_{bath}$ to 0.01 mM, 
decreasing extracellular volume fraction ($\alpha_{ECS}$) to 0.07, and increasing 
extracellular tortuosity ($\lambda_{ECS}$) to 1.8.  
This increased the propagation speed of the \k\ wave to 4.5 mm/min. 
**** We simulated the effects of mannitol, which has been shown to increase the latency 
of SD or prevent it altogether \cite{Balestrino1995-ts, Balestrino1999-wv}, 
by increasing $\alpha_{ECS}$ to 0.32 and decreasing $\lambda_{ECS}$ 
to 1.4 \cite{Sykova2008-av, Chen2002-hq}. 
This decreased the propagation speed of the \k\ wave to 1.7 mm/min.
**** We simulated the effects of propionate, which "primes" tissue for SD and decreases 
the threshold for initiation, by decreasing $\alpha_{ECS}$ to 0.12 \cite{Hrabe2019-cj}.
This increased the propagation speed of the \k\ wave to 4.0 mm/min.
**** Since these manipulations include combined changes to [\o2]$_{bath}$, $\alpha_{ECS}$,
and $\lambda_{ECS}$, we investigated their contributions to SD propagation individually by 
taking an otherwise normal, perfused slice ([\o2]$_{bath}$ = 0.1 mM; $\alpha_{ECS}$ = 0.2; 
$\lambda_{ECS}$ = 1.6) and altered each parameter separately ([\o2]$_{bath}$ = 0.01 - 0.1 mM; 
$\alpha_{ECS}$ = 0.07 - 0.32; $\lambda_{ECS}$ = 1.4 - 2.0). 
These simulations revealed that the primary mediator for changing SD propagation speed 
via hypoxia, propionate, or mannitol is $\alpha_{ECS}$. Over the range of $\alpha_{ECS}$
tested, SD speed changed by >2 mm/min, while \k\ speed changed by <0.5 mm/min over the ranges 
of [\o2]$_{bath}$ and $\lambda_{ECS}$ values tested.
*** Intrinsic tissue properties strongly affect SD propagation.
**** We investigated how neuronal S:V, neuronal volume fraction ($\alpha_{nrn}$), 
and cell density affect \k\ wave propagation.
**** Realistic neuronal S:V was essential to initiating SD.  When S:V = 0.02 $\mu$m$^{-1}$,
corresponding to an unaltered cylindrical neuron model whose radius is constrained such that 
$\alpha_{nrn}$ = 0.24 \cite{Rice1998-ll}, we could not initiate SD in either perfused or 
hypoxic slices.  In the perfused slice, realistic S:V for cortex (2 - 6 $\mu$m$^{-1}$) was
necessary for initiating SD.  In both perfused and hypoxic slices, \k\ wave speed 
increased with S:V above a certain threshold. (panel a)
**** We also found that \k\ wave speed increased with $\alpha_{nrn}$.  The speedup
was more dramatic in hypoxic than perfused slices (panel b).
**** We used two methods for investigating the effect of cell density. First, we 
changed cell density while keeping the neuron's morphology constant (surface area and 
volume remain unchanged). This results in changes to $\alpha_{nrn}$.  Second, we 
changed cell density, but kept $\alpha_{nrn}$ constant, which required manipulating 
the cell morphology for each density.  When cell morphology was held constant, \k\ 
wave speed increased with cell density, again more dramatically in the hypoxic slice (panel c).
When $\alpha_{nrn}$ was held constant, \k\ wave speed changed little with increasing 
cell density (panel d).
**** When pooling together the \k\ wave speeds from sims with different S:V, $\alpha_{nrn}$,
and cell density, we saw that \k\ wave speed is proportional to total neuronal 
surface area in the tissue for both perfused and hypoxic slices (panel e).
*** Slice thickness influences SD propagation (slice_thick_depth_kwave)
**** We modeled SD initiation in perfused and hypoxic slices 100 - 800 $\mu$m 
thick.
**** In perfused consitions, we could not initiate SD in thin (100 $\mu$m) slices.
\k\ wave speed increased in slices 300 - 400 $\mu$m thick slices, after which 
there was no speed up with increased thickness.
**** In hypoxic conditions, \k\ wave speed increased from 100 - 400 $\mu$m slices,
after which there was no speed up with increased thickness.
**** We also found depth-dependent SD propagation differences within perfused 
slices.  In the periphery of the slice (within 50 $\mu$m of the top/bottom), 
\k\ wave propagation is slower than in the core of the slice (within 50 $\mu$m of 
the center of the slice). 
**** \k\ wave propagation is far more uniform in hypoxic slices with similar \k\ 
wave speeds in the periphery and core.
**** Similarly, we observed depth-dependent differences in propagation of the 
depolarization wave in perfused slices.  Neurons in the slice periphery only 
undergo a modest depolarization and do not exhibit the stereotyped busting 
characteristic of SD.
**** Conversely, in hypoxic slices the depolarization wave in the periphery 
nearly catches up to the depolariation wave in the core, with cells beyond 
300 $\mu$m from the center of the plane in the periphery firing 
almost simultaneously as those at the same distance from the center of the plane 
in the core.

*** effect of insult properties
**** bolus radius: wave speed increases with bolus radius in perfused slice,
decreases slightly in hypoxic slice 
**** bolus K concentration: wave speed is fairly invariant for different to KBC

** Discussion 
*** how well the model replicates existing data 
**** in slices which most closely resembled cortex (high cell density, high s:v) we 
saw realistic wave speeds and firing patterns 
**** patterns of cell firing and depolarization fit closely with experimental
observations \cite{Devin_Brisson2013-rc, Lemaire2021-bu}. 
We saw firing rates as high as 250 Hz. While Lemaire et al. observed firing rates
reaching 150 Hz in pyramidal neurons and 400 Hz in interneurons, our model does not 
distinguish between the two and these differences may be due to neuronal connectivity.
**** inability to elicit SD in slices low s:v and slow propagation speeds with
low cell density and $\alpha_{nrn}$ fit with 
studies demonstrating resistance to SD in the brainstem / lower structures \cite{Andrew2016-sx, Devin_Brisson2013-rc, Andrew2017-rn}.
**** our simulations of SD in hypoxic tissue or tissue treated with mannitol or 
propionate qualitatively match observations.
***** Some of the fastest SD propagation speeds (~9 mm/min) have been observed in patients after 
stroke \cite{}. 
***** propionate treatment either lowers the thresholds for initiating SD or allows 
for SD initiation in tissue which was previously resistant \cite{Kraig1983-jj, Hrabe2019-cj}.
***** Mannitol has been shown to increase the latency between ouabain application and SD 
initiation and at high doses prevent SD altogether \cite{Balestrino1995-ts, Balestrino1999-wv}.
***** Our results support the hypothesis that the main mechanism 
in propionate's priming for SD is through reducing $\alpah_{ECS}$ \cite{Hrabe2019-cj}. 
Similarly, our simulations predict that the main mechanism by which SD propagation increases in 
hypoxic tissue and decreases in mannitol-treated tissue is also changes to $\alpah_{ECS}$.
**** as an extension of Wei2014-fj, shows their model was pretty good appoximation of
the necessary elements to produce SD 
***** needed a passive component for cells to remain stable in an invitro preparation,
where \o2\ was not being replenished at the rate it was produced
***** simple point neurons as described in Wei were insufficient to produce SD; 
realistic S:Vs were needed

*** experimentally verifiable predictions 
**** wave speed should be proportional to the total neuronal surface area within the tissue
**** differences in SD propagation for slices of different thickness and at different
depths within a slice
***** differences, both within and between slices, should be more pronounced in well 
perfused slice than in hypoxic slice 
***** in perfused slices, especially >300 $\mu$m thick, expect to see an ischemic core
***** in very thin, well-perfused slices on may not be able to elicit SD at all.
***** in hypoxic slices, expect to see SD throughout, but with delayed onset in the 
periphery of the slice 
**** $\alpah_{ECS}$ effects are the principal mediator of changes in SD propagation 
in hypoxic tissue and tissue treated with mannitol or propionate. Anything other insult which 
changes $\alpah_{ECS}$, like edema, will similarly affect SD propagation. 
**** wave speed should vary little for KBC > 30 mM 
**** Wave speed should increase with KBR in perfused slices; decrease in hypoxic slices

*** Limitations and Future Directions 
**** the model doesn't reproduce the properties of tissue from any one brain region 
***** in some sense, a limitation and a benefit.  Allows us to investigate the effects 
of any one parameter on SD propagation in isolation.  However, it prevents drawing any 
strong conclusions about region-specific aspects of SD.
***** The neurons in our model are homogenous and unconnected, either synaptically 
or via gap junctions.  We therefore can not address problems related to
network effects or propagation across layers of cortex.  Our model does, however, 
support the notion that gap junctions are not a necessary component for generating 
SD \cite{Shapiro2001-jl}.
**** introduction of the passive element in the neuronal membrane which is not mediated 
by any of the modeled ions raises questions 
***** was not necessary if [\o2]$_{bath}$ remained constant, therefore only needed in
to maintain steady-state membrane voltage in the context of the slice model.
***** possibly a H$^+$ leak - transients in pH have been observed during SD and ischemia \cite{Kraig1983-jj}.
**** ECS properties are static - there's experimental evidence that ECS properties like 
$\alpah_{ECS}$ and $\lambda_{ECS}$ change dynamically over the course of SD. 
***** We hypothesize that mannitol may not only increase $\alpah_{ECS}$, which we 
saw slowing the propagation of SD, but also prevent dynamic changes in $\alpah_{ECS}$
that would occur during SD, preventing SD initiation at high doses.
***** We are actively working on extending NEURON's RxD functionality to include 
dynamic ECS properties.
**** A number of the parameters which we varied independently are in reality 
interdependent.  For instance, neuronal swelling is closely linked to SD. When 
neuron's swell, their $\alpha_{nrn}$ changes with the volume of individual neurons.
Whether or not their surface to volume ratio is maintained or changes as well is unclear.
Furthermore, it is unknown whether the increase in $\alpha_{nrn}$ is accompanied by 
an equal and opposite decrease in $\alpha_{ECS}$, or might other brain compartments, like 
glial or perivascular spaces, shrink to offset changes to the ECS.  Our approach to modeling 
SD avoids some of these confounds, but in real tissue all of these parameters are doubtless 
dependent on each other.

* [2022-1-3 Mon] - future project directions (for WIP 1/19)
** basics 
*** in vivo conditions (O2 supply/consumption)
*** connectivity and exc/inh 
*** convert to netpyne 
** SD initiation 
*** already have elevated K+
*** palytoxin, ouabain
*** ischemia -> SD 
*** silencing inhibition (a la lemaire)
*** RD Andrew's SD activator (palytoxin like, but released by neurons or glia themselves)
** Realistic O2 supply 
*** Bill (and Sabina I think) mentioned dataset from Harvard w/ neurons,
glia, and vasculature, use for relative volumes/distances/etc 
*** Tune such that vasc provides sufficent O2 source for steady state 
*** Alternatively, go back to O2 consumption rate == O2 supply rate (pumps don't consume O2) 
** More dynamic changes in ECS 
*** might be limited by same reasons addressed in paper 
*** tying alpha to local neuronal activity (rather than K+)
*** maybe even try modeling colburn's seizure results (Wei model does seizure too, so not a bad tie in)

* [2022-1-7 Fri] - using EM dataset 
** H01 dataset links 
*** [[https://h01-release.storage.googleapis.com/landing.html][home page for dataset]]
*** [[https://colab.research.google.com/drive/1e2zdiRqGWN7kD2gc1F5l9NMatXn1pLT?usp=sharing][Don's nb for accessing neuropil morph]]
*** [[https://colab.research.google.com/drive/11LjYyAYBoyzk6j76qBILt5VX7L5m7ZLu?usp=sharing][My nb for accessing vasc morph]]
** can download metadata, but haven't figured out how to get morphology 

* [2022-1-16 Sun] - sabina's comments on revised manuscript 
** (abstract) "ECS shrinkage" found experimentally 
*** If I understand Hrabe2019-cj correctly, propionate facilitates SD induction 
and reduces alpha_ECS, but more hypothesized that this reduction causes facilitation.
Has alpha_ecs been specifically shown to increase SD speed?

** (abstract) "Slice thickness (≤ 400 µm) influences SD speed due to
the slice core becoming relatively hypoxic;"
... the slice core becoming hypoxic due to SD? 400 um slice is not hypoxic in the 
center. More comments on this in the main body of the paper.
*** Yes, should be rephrased:
Slice thickness (≤ 400 µm) influences SD speed because SD causes relative hypoxia 
in the slice core.

** (abstract) "5. Higher neuronal spike rates and faster spread will be
observed in the core than the periphery of perfused slice during SD." 
independent of slice thickness?
*** yes, can add if think necessary.

** (significance) - expand on neurology, "an your new finding explain something 
about penumbra and SD perhaps expanding penumbra into health tissue?"
*** right now, focus is on more conservative predictions from model, but 
possible to go with more out there, clinical predictions 

** (table 1) 1) references for these numbers; 2) for D, x 10^-5 ?
*** added

** (results) "With increasing thickness, an increasingly hypoxic core (despite O 2 perfusion of the
225 bath)" 
Question: is this hypoxic core due to the pump working like crazy and consuming locally 
available O2? This question also relates to the statement about a hypoxic core (Abstract). 
As I was reading the abstract though you were saying that 400 um think slices are hypoxic 
in the center. But now I think you are trying to say that they become hypoxic when an SD 
is generated. Whichever way it is, some clarification is needed.  
*** yes, tried to clarify in the abstract, but some possible additions may be:
**** Add slice thickness to Fig 4 and referene to it (Underpinning...)

** (discussion, prediction 1): Are these cells bigger. Otherwise the lower cell density and the 
lower ECS volume do not make sense.
*** should be higher alpha_ECS - fixed

** (discussion, prediction 1): Richter and Lehmenkuhler published a lot on SD in brainstem. 
Not sure if they measured the speed but here are some of their papers. One of them is in 
German. A nice opportunity for Craig to learn some :)
*** Read some of these, none of which directly address speed in comparison to SD in other 
regions.  Also, "Spreading depression can be elicited in brain stem of immature but not adult rats."
seems contradictory to other work 

** (discussion, prediction 2): I guess you would expect this to happen in the penumbra (stroke) 
or the neuropil surrounding injury (TBI).


** (discussion, prediction 6): This is similar to the point #1. Combine? 
*** True.  In defense of keeping separate #1 is more about brainstem's supposed resistance to SD,
whereas #6 is more about speed in any region, and doesn't account for alpha_ECS in the same way 

** (discussion, predictions 8 and 9) I suggest to take these two points out. When a slice is thicker 
than 450 um, a hypoxic core develops because oxygen doesn't get there in sufficient quantities. So 
this type of prep is different than the slices 200-400 um used in general. In fact, a slice 1000 um 
thick is used as a "thick slice model of ischemia".
*** don't see why leave out 8, stil implies 400 um slice should be easier/faster than 200 um slice
*** was mentioned first clause of "SD will be difficult or impossible to initiate in very thin slices; 
however, expect additional damage due to slicing (see next item)." but admit second doesn't make much 
sense to me 
*** Really, this shouldn't say >= 400 um.  In Fig. 7, holds true across all thicknesses >=200 um.

* [2022-1-26 Wed] - moving forward 
** submitted paper to jneuro last week 
** made fresh github repo for the model 
*** [[https://github.com/suny-downstate-medical-center/SDinSlice][repo for model of SD in slices]]
** working on porting to Netpyne
*** DONE - check if cell positions are right 
*** DONE - double check equations 
*** DONE - check back on separate file for neuron model(s)

* [2022-1-27 Thu] - more debugging 
** Rates need regions - see [[https://github.com/suny-downstate-medical-center/netpyne/issues/648][Regions for rates issue]]
** difference in parens for diff rates, check out parens epsilon_k 

* [2022-2-7 Mon] - netpyne model and h01 dataset 
** netpyne version of the model working, can have multiple pops, background 
stimuli, etc.
** H01 dataset progress - can get useful info from metadata, morphologies 
still problematic 
*** DONE - analyze metadata for layer specific densities 
*** uses for morphologies: cell and blodd vessel specific surface areas, 
**** currently, branchs in many cells are not attached, need to decide how we'd 
want to stitch them together 
**** also, issue with sections labelled -1 in swc file causing branches to be 
connected back to central point 
*** only 15000 neurons (per mm^3):
**** "The cell census included 49,080 neurons and glia (Fig. 3A), 
and 8.1k blood vessel cells (Fig. 3G). The number of neurons in this 
human sample is ~16k/1 mm3, many fold lower than the density of neurons 
in mouse cortex 11,12."
*** for pyramidal, spiny stellate, and interneurons, beta_nrn = 0.07
*** metadata for blood vessel cells might refer to cells in the blood vessels,
not blood vessels themselves.  Either way, metadata seems wrong: Ncell = 240 for 
'blood vessel cell'
**** "cell census included 8.1k blood vessel cells"
**** "The reconstructed blood vessels (22.6 cms in total length) also did not 
show much evidence of layer-specific behavior"

* [2022-2-8 Tue] - segregate netpyne ver for slice as in paper and further work 
** metadata from h01 datase has numbers close to, but not exactly, those in paper 
*** blood vessels (or blood-vessel-cells), whether the actual vessels or the cells 
in them, metadata is way under 
** DONE - make seaparate netpyne version of slice model 

* [2022-2-10 Thu] - more on h01 dataset  
** issues with morphology for neurons 
*** jump point: 
8694           0 2608960.000000000 493664.000000000 46332.000000000 104.043258667          -1
**** connected left 
6713           0 2608832.000000000 493568.000000000 46332.000000000 99.000000000        6709
**** connected right 
8695           0 2608800.000000000 493920.000000000 46332.000000000 104.043258667        8694
**** unconnected right 
6706           0 2608960.000000000 493728.000000000 45837.000000000 190.895263672        6705
*** jump point:
8652           0 2611424.000000000 493056.000000000 46464.000000000 71.554176331          -1
**** unconnected left 
6677           0 2611104.000000000 493088.000000000 46365.000000000 175.456542969        6676
**** connected right 
8653           0 2611552.000000000 492864.000000000 46695.000000000 106.437774658        8652
*** looped point
4384           0 2567808.000000000 407968.000000000 19866.000000000 962.282714844        4383
**** connected left 
4381           0 2567168.000000000 407808.000000000 20262.000000000 1632.647216797        4380
**** connected below 
4383           0 2567616.000000000 407840.000000000 20064.000000000 1188.377075195        4382
**** connected above 
4391           0 2566080.000000000 405760.000000000 21087.000000000 2097.648193359        4382
**** loop back 
4389           0 2568672.000000000 407584.000000000 18975.000000000 32.000000000        4388
**** it's child 
4390           0 2567680.000000000 405920.000000000 14652.000000000 32.000000000        4389
**** left of child 
12310           0 2567744.000000000 405888.000000000 14355.000000000 45.254833221       12309

* [2022-2-11 Fri] - mouse dataset
** can find blood vessels pretty easily in neuroglancer, all one segment/section/whatever 
don't know how to export though 

* [2022-2-14 Mon] - k buffering and basline network 
** spontaneous SD in modified version of netpynr L2/3 - L5 
*** cell densities loosely based on M1 paper 
*** SD starts quickly in layer 5 
*** increasing gliapump current by factor of 1k prevents runnaway K+ wave 
**** [[~/SDinSlice/SpatialModelNetpyne/normoxic_noelk_noO2consume_bkgStims_1kxgliapumps/kwave.png][K+ blows up but gets tamped down after ~ 1s]]
**** [[~/SDinSlice/SpatialModelNetpyne/normoxic_noelk_noO2consume_bkgStims_1kxgliapumps/raster.png][two excitatory pops have single spike then silent]]
*** playing around to get spiking 
**** [[~/SDinSlice/SpatialModelNetpyne/normox_network_2kxgliapumps_extraBkg/raster.png][extra bkg stims to exc cells]]
*** got one 
**** [[~/SDinSlice/SpatialModelNetpyne/normox_network_2kxgliapumps_extraBkgw5_noYdepend/raster.png][removing y-dependence on E->all conns got every population spiking]]

* [2022-2-21 Mon] - issue with morphologies 
** michael hines' email 
It appears to me, after zooming into a few of the roots that
8652           0 2611424.000000000 493056.000000000 46464.000000000 71.554176331          -1
should be connected to
6677           0 2611104.000000000 493088.000000000 46365.000000000 175.456542969        6676

8681           0 2615040.000000000 489120.000000000 50490.000000000 108.853111267        8680
should be connected to one of 
6679           0 2610784.000000000 493920.000000000 46827.000000000 163.217651367        6678
6680           0 2610688.000000000 494208.000000000 46926.000000000 91.934761047        6679

8694           0 2608960.000000000 493664.000000000 46332.000000000 104.043258667          -1
should be connected to
6713           0 2608832.000000000 493568.000000000 46332.000000000 99.000000000        6709
what is strange about the latter is that there is a red line drawn between the two points even though they are not connected in the file.
I need to look into the swc reader to figure out how that can happen.

Notice that the type of all the roots is 0 (soma). Unfortunately in this case, the heuristic is to connect these to the first point (in this case id 1)
However changing all types to 1 doesn't affect the view
** working on script to fix swc, but not much luck so far 
*** seems like point michael thinks first example should be connected to is not the closest 
*** some of these points have children (second example)

* [2022-2-23 Wed] - more morphs 
** started putting swc data in dataframes 
** can find parent -1 and connect to closest point, but some are actually connected to main structure,
so dont want to do that everytime 
*** need to determine if branch connected to maintree; if so, do something else 
*** 6713 and 8699 have exactly the same coordinates, maybe need to merge  

* [2022-3-14 Mon] - anoxic depol in brainstem 
** mark's data: seizure -> apnea -> anoxia -> SD 
*** main question: does the seizure of the anoxia cause the depol 
**** get depol without seizure, just apnea 
**** time between respiratory failure and depol is shorted w/ seizure
*** questions for mark
**** how brainstemy should model be? size, connectivity, cell types
**** could I access the recordings 
**** t respiratory failure to brainstem SD after seizure or otherwise 
significantly different?
**** data for baseline? firing rates?
** possible experiments 
*** SD speed by brain region - ctx vs brainstem vs elsewhere 
*** effect of bolus concentration (not sure about size)

* [2022-3-16 Wed] - new repo for in vivo 
** o2 sources, o2 consumed, no glia factor sims 
*** back to playing around with what is necessary o2 supply and glial current to maintain reasonable firing rates 
and not develop SD
** back to probelm with stampede2
*** job running, but sim creates output folder but otherwise doesn't write to disk (no output files or std output (% done))

* [2022-3-17 Thu] - todos 
** TODO - put together non-rxd version of netpyne cortical sim 
*** work in progress, added to repo 
** DONE - email mark and rena about ideal brainstem model 
** DONE - look at microns mouse data
*** set up caveclient, but when running *client.materialize.get_tables()* get:
Traceback (most recent call last):
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/requests/adapters.py", line 440, in send
    resp = conn.urlopen(
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/urllib3/connectionpool.py", line 876, in urlopen
    return self.urlopen(
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/urllib3/connectionpool.py", line 876, in urlopen
    return self.urlopen(
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/urllib3/connectionpool.py", line 876, in urlopen
    return self.urlopen(
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/urllib3/connectionpool.py", line 866, in urlopen
    retries = retries.increment(method, url, response=response, _pool=self)
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/urllib3/util/retry.py", line 592, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='minnie.microns-daf.com', port=443): Max retries exceeded with url: /materialize/api/v2/datastack/minnie65_public_v117/versions (Caused by ResponseError('too many 503 error responses'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/caveclient-4.11.0-py3.8.egg/caveclient/frameworkclient.py", line 339, in materialize
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/caveclient-4.11.0-py3.8.egg/caveclient/materializationengine.py", line 143, in MaterializationClient
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/caveclient-4.11.0-py3.8.egg/caveclient/materializationengine.py", line 190, in __init__
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/caveclient-4.11.0-py3.8.egg/caveclient/materializationengine.py", line 226, in most_recent_version
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/caveclient-4.11.0-py3.8.egg/caveclient/materializationengine.py", line 240, in get_versions
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/requests/sessions.py", line 542, in get
    return self.request('GET', url, **kwargs)
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/requests/sessions.py", line 529, in request
    resp = self.send(prep, **send_kwargs)
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/requests/sessions.py", line 645, in send
    r = adapter.send(request, **kwargs)
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/requests/adapters.py", line 510, in send
    raise RetryError(e, request=request)
requests.exceptions.RetryError: HTTPSConnectionPool(host='minnie.microns-daf.com', port=443): Max retries exceeded with url: /materialize/api/v2/datastack/minnie65_public_v117/versions (Caused by ResponseError('too many 503 error responses'))
*** I can access the example mesh from 
'graphene://https://minnie.microns-daf.com/segmentation/table/minnie65_public_v117' 
but  not with cv = cloudvolume.CloudVolume("precomputed://s3://bossdb-open-data/microns/minnie/minnie65-flat-seg/", use_https=True) 
or cv = cloudvolume.CloudVolume("precomputed://gs://iarpa_microns_phase3/minnie65/seg", use_https=True). 
not sure if all the relevant data's in the first one or not
*** no radius for mesh.  mesh->skeleton->swc? or mesh->swc? or .asc?
** TODO - look at connectivity from human ctx data 
** TODO - figure out issues with stampede2 

* [2022-3-21 Mon] - meeting and rxd version of netpyne model
** meeting w/ forrest
*** [[https://github.com/AllenInstitute/pcg_skel][Save time by generating robust neuronal skeletons directly from a ChunkedGraph dynamic segmentations!]]  
*** [[https://github.com/sdorkenw/MeshParty][A package to work with meshes, designed around use cases for analyzing neuronal morphology]]
*** [[https://meshparty.readthedocs.io/en/latest/guide/skeletons.html][mesh party for skeletons]] 
*** shapediameter function to estimate diameter of mesh at every point
** rxd version of a non-rxd model
*** right now having trouble getting matching dynamics, probably should be more systematic 
*** might want to use simpler model than currently using 
*** trying default hh parameters, since perviously not spiking
*** 1 stim in 10% of cells activates most (if not all) of network, but at least no sd in 

* [2022-3-22 Tue] - meshes and skeletons
** pcg_skel 
*** installation error: numpy 1.22.1 is installed but numpy<1.22,>=1.18 is required by {'numba'}
**** maybe should create separate python env 
*** operates on chunked graph, so don't think necessary for mesh->skeleton 
** meshparty 
*** can download example cell id, need to know how to get other cell ids  
*** skeletonize fails because pyembree not installed
**** can't get conda installation working 
***** [[https://github.com/scopatz/pyembree/issues/23][conda installation issue]]
mikedh commented on Jun 22, 2020
For whatever it's worth we install pyembree/embree 2.17.7 on the trimesh docker images (vanilla Python + Debian buster) using this bash script:
wget https://github.com/mikedh/trimesh/blob/master/docker/builds/embree.bash
sudo bash embree.bash
***** bash file seemed to work but got following when running *meshparty.skeletonize.skeletonize_mesh*
WARNING:root:calculating rays without pyembree, conda install pyembree for large speedup
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/meshparty/skeletonize.py", line 221, in skeletonize_mesh
    rs = ray_trace_distance(orig_skel_index[vert_filter], mesh)
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/meshparty/ray_tracing.py", line 42, in ray_trace_distance
    ray_inter = ray_pyembree.RayMeshIntersector(mesh)
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/trimesh/exceptions.py", line 28, in __getattribute__
    raise super(ExceptionModule, self).__getattribute__('exc')
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/trimesh/ray/__init__.py", line 5, in <module>
    from . import ray_pyembree
  File "/home/craig/SDinSlice/sdenv/lib/python3.8/site-packages/trimesh/ray/ray_pyembree.py", line 10, in <module>
    from pyembree import rtcore_scene
ImportError: libembree.so.2: cannot open shared object file: No such file or directory
**** [[https://github.com/embree/embree][embree ray tracing software]]

* [2022-8-23 Tue] - returning to SD work 
** questions for lab meeting
*** how much do we want to take from EM data?
**** cell types, positions, blood vessels
*** generic connectivity, point(ish) neurons 

* [2022-8-24 Wed] - returning to em datasets
** trying to download mesh of blood vessels from microns 

* [2022-8-25 Thu] - analyzing bloodvessel mesh 
** Downloading mesh
*** to install pyembree on neurosim, needed to use python=3.8.10
*** process killed trying to dowload on pt and ru 

* [2022-11-23 Wed] - getting back into it 
** robert's students are looking at capillary density and connectivity 
** want to look at how much o2 needed to maintain homeostasis 
*** perfused_nok0
**** fairly sable, but o2 does drop in center to 0.05 
*** o2everywhere_nok0 
**** similar, o2 drops, but not as much 
*** o2everywhere_4hzbkgStim 
**** SD starts 1-2s in, didn't run long enough to spread 
*** o2everywhereNoVolScale_4hzbkgStim
**** negligible difference to previous sim 
*** o2everywhereNoVolScale_4hzbkgStim
**** SD starts ~2s, spreads through tissue 

* [2022-12-8 Thu] - more on homeostasis 
** more sims 
*** constantO2at23mmHg_staggered4hzBkgTo5pops
**** looks pretty stable for vmembs, but does have [K+] > 15 mM 
**** can't get raster, not surte why
***** error:
>>> rasterPlot('constantO2at23mmHg_staggered4hzBkgTo5pops', figname='constantO2at23mmHg_staggered4hzBkgTo5pops/raster.png')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/craig/SDinVivo/uniformDensity/analysis.py", line 41, in rasterPlot
    c = cols[np.argwhere(pops==raster[key]['pop'])[0][0]]
IndexError: index 0 is out of bounds for axis 0 with size 0
***** has to do with pops, currently hard coded, need to fix 

* [2022-12-9 Fri] - sims and raster 
** fixed raster plot, now includes data from "recs" and mem_files 
** sims 
*** constantO2at23mmHg_staggered4hzBkgTo5pops_5s 
**** SD around 2s

* [2022-12-13 Tue] - run something w/ connectivity 
** potjans & diesman

* [2022-12-15 Thu] - potjans & diesman
** netpyne potjans & diesman model - https://github.com/suny-downstate-medical-center/PDCM_NetPyNE.git 
*** cortical microcircuit model 
*** trying to run on neurosim 
**** plenty of issues running on neurosim, ran but crashed my machine 
**** probably unrelated, git only cloning empty repos

* [2022-12-21 Wed] - converting potjans & diesman to rxd 
** running original PD model 
*** error w/ raster plot 
** need to scale spatial dimensions along with network size 
*** to keep y constant, x and z need to be 241.45
*** works for default rescaling factor, need to fix if want to use 
different sized networks 
** runs without TC or backgroun stim populations 
*** need to exclude those from rxd
** no indication of stim when add in bkg stim
*** first wasn't connected up, but even after fixing that, nothing 

* [2023-1-4 Wed] - get cells spiking in PD w/ RxD 
** trying to remove all nonctx cells, add bkg stims 
*** stimulating all cells w/ bkg results in integration error 


* TODOS
** TODO: rescalability of rxd version of PD model 
** DONE: fix uniformdensity raster plot 